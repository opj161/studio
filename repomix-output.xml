This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/workflows/playwright.yml
.gitignore
.roo/mcp.json
components.json
docs/blueprint.md
docs/ui-redesign-plan.md
next.config.ts
package.json
playwright.config.ts
postcss.config.mjs
README.md
src/app/actions.ts
src/app/globals.css
src/app/layout.tsx
src/app/page.tsx
src/components/ClothingUpload.tsx
src/components/GenerationHistory.tsx
src/components/icons.ts
src/components/ImageDisplay.tsx
src/components/ImageDisplayCard.tsx
src/components/ModelCustomization.tsx
src/components/ui/accordion.tsx
src/components/ui/alert-dialog.tsx
src/components/ui/alert.tsx
src/components/ui/avatar.tsx
src/components/ui/badge.tsx
src/components/ui/button.tsx
src/components/ui/calendar.tsx
src/components/ui/card.tsx
src/components/ui/chart.tsx
src/components/ui/checkbox.tsx
src/components/ui/dialog.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/form.tsx
src/components/ui/grid.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/loading-indicator.tsx
src/components/ui/menubar.tsx
src/components/ui/popover.tsx
src/components/ui/progress.tsx
src/components/ui/radio-group.tsx
src/components/ui/scroll-area.tsx
src/components/ui/select.tsx
src/components/ui/separator.tsx
src/components/ui/sheet.tsx
src/components/ui/sidebar.tsx
src/components/ui/skeleton.tsx
src/components/ui/slider.tsx
src/components/ui/switch.tsx
src/components/ui/table.tsx
src/components/ui/tabs.tsx
src/components/ui/textarea.tsx
src/components/ui/toast.tsx
src/components/ui/toaster.tsx
src/components/ui/tooltip.tsx
src/hooks/use-mobile.tsx
src/hooks/use-toast.ts
src/lib/cache-service.ts
src/lib/errors.ts
src/lib/prompt-builder.ts
src/lib/store.ts
src/lib/utils.ts
src/lib/validation.ts
src/types/actions.ts
src/types/index.ts
tailwind.config.ts
tests-examples/demo-todo-app.spec.ts
tests/example.spec.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/playwright.yml">
name: Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Run Playwright tests
      run: npx playwright test
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
</file>

<file path=".roo/mcp.json">
{
  "mcpServers": {
    "playwright": {
      "command": "C:\\Program Files\\nodejs\\npx.ps1",
      "args": [
        "-y",
        "@executeautomation/playwright-mcp-server"
      ]
    }
  }
}
</file>

<file path="docs/ui-redesign-plan.md">
Okay, let's create a detailed implementation plan for achieving the dynamic, fluid workspace using Tailwind CSS v4, based on your current codebase and best practices.
Understanding Tailwind v4 Context:
Theme in CSS: Your globals.css correctly uses @theme to define colors, radius, etc., with CSS variables. This is the standard v4 approach.
Core Utilities: Classes like flex, grid, p-4, gap-6, rounded-md, h-full, w-full, aspect-square, object-contain, responsive prefixes (lg:, xl:) are the core tools we'll use.
No Config Changes: We won't need to modify tailwind.config.ts for theme or layout logic.
cn Utility: Essential for conditional classes in React components.
Implementation Plan:
Phase 0: Prerequisites & Setup
Define Breakpoints (if needed): Review the default Tailwind breakpoints. If you need custom ones, define them in globals.css under @theme. The defaults (sm, md, lg: 1024px, xl: 1280px, 2xl: 1536px) are likely sufficient. We'll primarily use lg and xl.
/* globals.css - Example if you needed custom breakpoints */
@theme {
  /* ... other theme values ... */
  /* --breakpoint-lg: 1024px; /* Default */
  /* --breakpoint-xl: 1280px; /* Default */
  /* ... */
}
content_copy
download
Use code with caution.
Css
Ensure Vertical Space: The layout needs vertical room to grow. In src/app/page.tsx, ensure the main container allows its children to fill height. Adding flex-grow to the <main> element is a good practice.
// src/app/page.tsx
// Add flex-grow to the main element
<main className="flex-grow container mx-auto px-4 py-8 max-w-7xl grid grid-cols-1 lg:grid-cols-[minmax(350px,_1fr)_2fr] xl:grid-cols-[minmax(350px,_1fr)_1.5fr_1.5fr] gap-6">
  {/* ... rest of the main content ... */}
</main>
content_copy
download
Use code with caution.
Jsx
Self-correction: The grid declaration should be directly on the main element as shown above, defining the different column structures per breakpoint.
Phase 1: Restructure the Main Layout Grid (src/app/page.tsx)
Modify the <main> element's classes to define the responsive grid structure using fractional units (fr) and minmax for fluidity.
// src/app/page.tsx

export default function Home() {
  const { originalImage } = useGenerationStore();

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl flex flex-col min-h-screen">
      <Toaster />
      <header className="mb-6 text-center">
        <h1 className="text-3xl font-bold">StyleAI</h1>
      </header>

      {/* Apply flex-grow and the responsive grid structure HERE */}
      <main className="flex-grow grid grid-cols-1 lg:grid-cols-[minmax(350px,_1fr)_2fr] xl:grid-cols-[minmax(350px,_1fr)_1.5fr_1.5fr] gap-6">

        {/* --- Column 1: Controls (All Breakpoints) --- */}
        {/* Add flex flex-col h-full to make content fill height */}
        <div className="lg:col-span-1 flex flex-col space-y-6 h-full">
          {/* Upload Section */}
          <Card className="flex flex-col"> {/* Add flex flex-col */}
            <CardContent className="p-4 flex-grow"> {/* Add flex-grow */}
              <ClothingUpload />
            </CardContent>
          </Card>

          {/* Customization Section - Conditionally Rendered */}
          {originalImage && (
            <Card className="flex flex-col"> {/* Add flex flex-col */}
              <CardContent className="p-4 flex-grow"> {/* Add flex-grow */}
                <ModelCustomization />
              </CardContent>
            </Card>
          )}

          {/* Generation History - Place at bottom, allow natural height or use ScrollArea */}
          {/* Accordion should manage its own height internally */}
          <div className="mt-auto pt-6"> {/* Push history towards the bottom */}
             <GenerationHistory />
          </div>
        </div>

        {/* --- Columns 2 & 3: Results (Vary based on breakpoint) --- */}

        {/* On LG (but not XL), ImageDisplay spans the second column */}
        {/* On XL, ImageDisplay's *children* are split across cols 2 & 3 */}

        {/* Approach 1: Refactor ImageDisplay (More Complex) */}
        {/* Would involve ImageDisplay accepting props to render parts separately */}

        {/* Approach 2: Conditional Rendering in Page (Simpler for now) */}
        {/* We'll conditionally render the individual cards from ImageDisplay logic here */}

        {/* Original Image Card Container (LG: Part of ImageDisplay, XL: Column 2) */}
        <div className="hidden lg:flex lg:col-start-2 lg:col-span-1 xl:col-start-2 xl:col-span-1 flex-col h-full">
           <ImageDisplayCard type="original" />
        </div>

        {/* Generated Result Card Container (LG: Part of ImageDisplay, XL: Column 3) */}
         <div className="hidden lg:flex lg:col-start-2 lg:col-span-1 xl:col-start-3 xl:col-span-1 flex-col h-full">
           <ImageDisplayCard type="generated" />
         </div>

         {/* Mobile View: Use the original ImageDisplay stacking */}
         <div className="lg:hidden col-span-1">
            <ImageDisplay /> {/* Original component for mobile stacking */}
         </div>

      </main>
    </div>
  );
}

// Helper component to render individual cards (logic extracted from ImageDisplay)
// NOTE: You'll need to adapt the logic/state management from ImageDisplay.tsx here
const ImageDisplayCard = ({ type }: { type: 'original' | 'generated' }) => {
   const { originalImage, generatedImage, isLoading, error } = useGenerationStore();
   const [isLoaded, setIsLoaded] = useState(false);
   const imageSrc = type === 'original' ? originalImage : generatedImage;
   const title = type === 'original' ? 'Original Item' : 'Generated Result';
   const placeholderIcon = type === 'original' ? UploadCloud : Wand2;
   const placeholderText = type === 'original' ? 'Upload an item...' : 'Generate an image...';

  // Simplified example - Needs full state handling from ImageDisplay.tsx
   useEffect(() => {
     setIsLoaded(false);
   }, [imageSrc]);

  const handleDownload = () => { /* ... download logic ... */ };
  const handleShare = () => { /* ... share logic ... */ };


   return (
     <Card className="flex flex-col flex-grow"> {/* Ensure card grows */}
       <CardHeader>
         <CardTitle>{title}</CardTitle>
       </CardHeader>
       <CardContent className="p-4 flex-grow"> {/* Content grows */}
         <div className="relative aspect-square w-full h-full bg-muted rounded-md overflow-hidden"> {/* Container uses full height */}
           {/* --- Add conditional rendering logic from ImageDisplay here --- */}
           {/* Example for generated card loading state */}
           {type === 'generated' && isLoading && (
              <div className="absolute inset-0 flex flex-col items-center justify-center p-6">
                <Skeleton className="h-full w-full" />
                <p className="absolute bottom-4 text-sm text-center font-medium text-muted-foreground">
                  AI is creating...
                </p>
              </div>
           )}
           {/* Example for generated card error state */}
           {type === 'generated' && error && (
             <div className="absolute inset-0 flex items-center justify-center p-4">
               <Alert variant="destructive" className="w-full">
                 <AlertCircle className="h-4 w-4" />
                 <AlertTitle>Failed</AlertTitle>
                 <AlertDescription>{error.message}</AlertDescription>
               </Alert>
             </div>
           )}
            {/* Example for displaying image */}
           {imageSrc && !error && !(type === 'generated' && isLoading) && (
             <>
               {!isLoaded && <Skeleton className="absolute inset-0" />}
               <Image
                 src={imageSrc}
                 alt={title}
                 fill
                 sizes="(max-width: 1280px) 50vw, 33vw" // Adjust sizes based on columns
                 className={cn("object-contain transition-opacity duration-300", isLoaded ? 'opacity-100' : 'opacity-0')}
                 priority={type === 'original'}
                 onLoad={() => setIsLoaded(true)}
               />
             </>
           )}
           {/* Example for placeholder */}
           {!imageSrc && !error && !(type === 'generated' && isLoading) && (
              <div className="flex flex-col h-full items-center justify-center text-muted-foreground p-4">
                  <placeholderIcon className="h-16 w-16 mb-4 text-gray-400" />
                  <p className="text-center text-sm">{placeholderText}</p>
              </div>
           )}
           {/* --- End conditional rendering --- */}
         </div>
       </CardContent>
        {/* Add Footer with buttons conditionally for generated card */}
       {type === 'generated' && generatedImage && !isLoading && !error && (
          <CardFooter className="px-4 pb-4 pt-2 flex justify-end gap-2">
            {/* Download/Share buttons */}
             <TooltipProvider delayDuration={100}>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="outline" size="icon" onClick={handleDownload}>
                    <Download className="h-4 w-4" />
                    <span className="sr-only">Download Image</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Download</p></TooltipContent>
              </Tooltip>
            </TooltipProvider>
            {/* Share Button (conditionally rendered) */}
          </CardFooter>
        )}
     </Card>
   );
};
content_copy
download
Use code with caution.
Jsx
Phase 2: Adapt Components for Vertical Filling & Fluidity
ImageDisplay.tsx (If keeping separate component for mobile):
Ensure the internal structure uses flex-grow on CardContent and the image container uses aspect-ratio with w-full / h-full and object-contain as described in Phase 1 (ImageDisplayCard helper).
The internal grid should be grid grid-cols-1 gap-6 (for mobile stacking).
ClothingUpload.tsx & ModelCustomization.tsx:
These should fit naturally. Ensure their parent Card components have flex flex-col (added in Phase 1). Their CardContent might need flex-grow if you want internal elements to space out vertically, but it's often not necessary for forms.
GenerationHistory.tsx:
The Accordion itself should not flex-grow. It sits at the bottom (mt-auto on its wrapper in page.tsx).
The ScrollArea inside the AccordionContent needs a defined max-height or height (e.g., h-[250px] or max-h-[40vh]) to become scrollable without pushing the main layout.
Phase 3: Styling Refinements (Tailwind Classes)
Consistency: Double-check padding (p-4, p-6), gaps (gap-6), and spacing (space-y-6) for visual harmony across breakpoints.
Image Containers: Ensure the bg-muted, rounded-md, and overflow-hidden classes are applied consistently to the div containing the next/image component for loading states.
Placeholders: Use flex items-center justify-center h-full text-muted-foreground within the image containers for vertically and horizontally centered placeholder content.
Transitions: Apply transition-opacity duration-300 to images for the fade-in effect on load. Consider adding transitions for the appearance/disappearance of the ModelCustomization card (e.g., using CSS or a library).
Phase 4: Testing
Browser DevTools: Use the responsive design mode to test:
Mobile portrait/landscape.
Tablet portrait/landscape.
Standard Desktop (around 1024px - 1280px width) -> Should trigger lg: two-column layout.
Wide Desktop ( > 1280px width) -> Should trigger xl: three-column layout.
Ultra-wide Desktop ( > 1600px width) -> Check how the fr units distribute space.
Functionality: Test the entire workflow: upload, customization visibility, generation (including loading/error states), history interaction.
Edge Cases: Test with long history lists, different image aspect ratios (though object-contain helps), and potential errors during generation.
Real Devices: Test on actual mobile/tablet devices if possible.
This plan uses Tailwind v4's responsive modifiers and layout utilities (grid, flex, fr, minmax) to create the dynamic, fluid workspace you described, adapting from a single column on mobile to two and then three fluid columns on wider screens, while ensuring content fills the available vertical space. The helper component approach in page.tsx simplifies handling the split view for ImageDisplay on the widest screens. Remember to move the detailed state logic (loading, error handling, image sources) for the display cards into the ImageDisplayCard helper.
</file>

<file path="playwright.config.ts">
import { defineConfig, devices } from '@playwright/test';

/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */
// import dotenv from 'dotenv';
// import path from 'path';
// dotenv.config({ path: path.resolve(__dirname, '.env') });

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
  testDir: './tests',
  /* Run tests in files in parallel */
  fullyParallel: true,
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  forbidOnly: !!process.env.CI,
  /* Retry on CI only */
  retries: process.env.CI ? 2 : 0,
  /* Opt out of parallel tests on CI. */
  workers: process.env.CI ? 1 : undefined,
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  reporter: 'html',
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  use: {
    /* Base URL to use in actions like `await page.goto('/')`. */
    // baseURL: 'http://127.0.0.1:3000',

    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
    trace: 'on-first-retry',
  },

  /* Configure projects for major browsers */
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },

    // {
    //   name: 'firefox',
    //   use: { ...devices['Desktop Firefox'] },
    // },

    // {
    //   name: 'webkit',
    //   use: { ...devices['Desktop Safari'] },
    // },

    /* Test against mobile viewports. */
    // {
    //   name: 'Mobile Chrome',
    //   use: { ...devices['Pixel 5'] },
    // },
    // {
    //   name: 'Mobile Safari',
    //   use: { ...devices['iPhone 12'] },
    // },

    /* Test against branded browsers. */
    // {
    //   name: 'Microsoft Edge',
    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },
    // },
    // {
    //   name: 'Google Chrome',
    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
    // },
  ],

  /* Run your local dev server before starting the tests */
  // webServer: {
  //   command: 'npm run start',
  //   url: 'http://127.0.0.1:3000',
  //   reuseExistingServer: !process.env.CI,
  // },
});
</file>

<file path="src/components/ImageDisplayCard.tsx">
"use client";

import Image from 'next/image';
import { useState, useEffect } from 'react';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Download, Share, UploadCloud, Wand2, AlertCircle } from 'lucide-react';
import { useGenerationStore } from '@/lib/store';
import { cn } from '@/lib/utils'; // Assuming cn utility is in utils

interface ImageDisplayCardProps {
  type: 'original' | 'generated';
}

export default function ImageDisplayCard({ type }: ImageDisplayCardProps) {
   const { originalImage, generatedImage, isLoading, error } = useGenerationStore();
   const [isLoaded, setIsLoaded] = useState(false);

   const imageSrc = type === 'original' ? originalImage : generatedImage;
   const title = type === 'original' ? 'Original Item' : 'Generated Result';
   const PlaceholderIcon = type === 'original' ? UploadCloud : Wand2;
   const placeholderText = type === 'original' ? 'Upload an item...' : 'Generate an image...';

   useEffect(() => {
     setIsLoaded(false); // Reset loading state when image source changes
   }, [imageSrc]);

   const handleDownload = async () => {
     if (!generatedImage) return;
     try {
       const response = await fetch(generatedImage);
       if (!response.ok) throw new Error('Failed to fetch image for download');
       const blob = await response.blob();
       const url = window.URL.createObjectURL(blob);
       const link = document.createElement('a');
       link.href = url;
       link.download = `styleai-generated-${Date.now()}.png`;
       document.body.appendChild(link);
       link.click();
       document.body.removeChild(link);
       window.URL.revokeObjectURL(url);
     } catch (err) {
       console.error("Download failed:", err);
       // TODO: Add toast notification on failure
     }
   };

   const handleShare = async () => {
     if (!generatedImage || typeof navigator.share !== 'function') return;
     try {
       const response = await fetch(generatedImage);
       if (!response.ok) throw new Error('Failed to fetch image for sharing');
       const blob = await response.blob();
       const file = new File([blob], 'styleai-generated.png', { type: blob.type || 'image/png' });
       await navigator.share({
         title: 'My StyleAI Generated Image',
         text: 'Check out this outfit I generated with StyleAI!',
         files: [file]
       });
     } catch (err) {
       console.error('Error sharing:', err);
       // TODO: Add toast notification on failure
     }
   };

   // Helper for placeholder
   const PlaceholderContent = ({ icon: Icon }: { icon: React.ElementType }) => (
     <div className="flex flex-col h-full items-center justify-center text-muted-foreground p-4">
       <Icon className="h-16 w-16 mb-4 text-gray-400" />
       <p className="text-center text-sm">{placeholderText}</p>
     </div>
   );

   return (
     <Card className="flex flex-col flex-grow"> {/* Ensure card grows */}
       <CardHeader>
         <CardTitle>{title}</CardTitle>
       </CardHeader>
       <CardContent className="p-4 flex-grow"> {/* Content grows */}
         <div className="relative aspect-square w-full h-full bg-muted rounded-md overflow-hidden"> {/* Container uses full height */}
           {/* Loading State (Generated Only) */}
           {type === 'generated' && isLoading && (
              <div className="absolute inset-0 flex flex-col items-center justify-center p-6">
                <Skeleton className="h-full w-full" />
                <p className="absolute bottom-4 text-sm text-center font-medium text-muted-foreground">
                  AI is creating...
                </p>
              </div>
           )}

           {/* Error State (Generated Only) */}
           {type === 'generated' && error && !isLoading && (
             <div className="absolute inset-0 flex items-center justify-center p-4">
               <Alert variant="destructive" className="w-full">
                 <AlertCircle className="h-4 w-4" />
                 <AlertTitle>Failed</AlertTitle>
                 <AlertDescription>{error.message || 'An unexpected error occurred.'}</AlertDescription>
               </Alert>
             </div>
           )}

           {/* Image Display State */}
           {imageSrc && !(type === 'generated' && (isLoading || error)) && (
             <>
               {!isLoaded && <Skeleton className="absolute inset-0" />}
               <Image
                 src={imageSrc}
                 alt={title}
                 fill
                 sizes="(max-width: 1024px) 100vw, (max-width: 1280px) 50vw, 33vw" // Adjusted sizes
                 className={cn("object-contain transition-opacity duration-300", isLoaded ? 'opacity-100' : 'opacity-0')}
                 priority={type === 'original'} // Prioritize original image loading
                 quality={type === 'generated' ? 90 : undefined} // Set quality for generated
                 onLoad={() => setIsLoaded(true)}
               />
             </>
           )}

           {/* Placeholder State */}
           {!imageSrc && !(type === 'generated' && (isLoading || error)) && (
              <PlaceholderContent icon={PlaceholderIcon} />
           )}
         </div>
       </CardContent>

       {/* Footer with buttons (Generated Only, when image exists and no loading/error) */}
       {type === 'generated' && generatedImage && !isLoading && !error && (
          <CardFooter className="px-4 pb-4 pt-2 flex justify-end gap-2">
            <TooltipProvider delayDuration={100}>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="outline" size="icon" onClick={handleDownload}>
                    <Download className="h-4 w-4" />
                    <span className="sr-only">Download Image</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p>Download</p></TooltipContent>
              </Tooltip>
            </TooltipProvider>
            {/* Share Button (conditionally rendered based on browser support) */}
            {typeof navigator !== 'undefined' && typeof navigator.share === 'function' && (
              <TooltipProvider delayDuration={100}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button variant="outline" size="icon" onClick={handleShare}>
                      <Share className="h-4 w-4" />
                      <span className="sr-only">Share Image</span>
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent><p>Share</p></TooltipContent>
                </Tooltip>
              </TooltipProvider>
            )}
          </CardFooter>
        )}
     </Card>
   );
}
</file>

<file path="tests-examples/demo-todo-app.spec.ts">
import { test, expect, type Page } from '@playwright/test';

test.beforeEach(async ({ page }) => {
  await page.goto('https://demo.playwright.dev/todomvc');
});

const TODO_ITEMS = [
  'buy some cheese',
  'feed the cat',
  'book a doctors appointment'
] as const;

test.describe('New Todo', () => {
  test('should allow me to add todo items', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?');

    // Create 1st todo.
    await newTodo.fill(TODO_ITEMS[0]);
    await newTodo.press('Enter');

    // Make sure the list only has one todo item.
    await expect(page.getByTestId('todo-title')).toHaveText([
      TODO_ITEMS[0]
    ]);

    // Create 2nd todo.
    await newTodo.fill(TODO_ITEMS[1]);
    await newTodo.press('Enter');

    // Make sure the list now has two todo items.
    await expect(page.getByTestId('todo-title')).toHaveText([
      TODO_ITEMS[0],
      TODO_ITEMS[1]
    ]);

    await checkNumberOfTodosInLocalStorage(page, 2);
  });

  test('should clear text input field when an item is added', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?');

    // Create one todo item.
    await newTodo.fill(TODO_ITEMS[0]);
    await newTodo.press('Enter');

    // Check that input is empty.
    await expect(newTodo).toBeEmpty();
    await checkNumberOfTodosInLocalStorage(page, 1);
  });

  test('should append new items to the bottom of the list', async ({ page }) => {
    // Create 3 items.
    await createDefaultTodos(page);

    // create a todo count locator
    const todoCount = page.getByTestId('todo-count')
  
    // Check test using different methods.
    await expect(page.getByText('3 items left')).toBeVisible();
    await expect(todoCount).toHaveText('3 items left');
    await expect(todoCount).toContainText('3');
    await expect(todoCount).toHaveText(/3/);

    // Check all items in one call.
    await expect(page.getByTestId('todo-title')).toHaveText(TODO_ITEMS);
    await checkNumberOfTodosInLocalStorage(page, 3);
  });
});

test.describe('Mark all as completed', () => {
  test.beforeEach(async ({ page }) => {
    await createDefaultTodos(page);
    await checkNumberOfTodosInLocalStorage(page, 3);
  });

  test.afterEach(async ({ page }) => {
    await checkNumberOfTodosInLocalStorage(page, 3);
  });

  test('should allow me to mark all items as completed', async ({ page }) => {
    // Complete all todos.
    await page.getByLabel('Mark all as complete').check();

    // Ensure all todos have 'completed' class.
    await expect(page.getByTestId('todo-item')).toHaveClass(['completed', 'completed', 'completed']);
    await checkNumberOfCompletedTodosInLocalStorage(page, 3);
  });

  test('should allow me to clear the complete state of all items', async ({ page }) => {
    const toggleAll = page.getByLabel('Mark all as complete');
    // Check and then immediately uncheck.
    await toggleAll.check();
    await toggleAll.uncheck();

    // Should be no completed classes.
    await expect(page.getByTestId('todo-item')).toHaveClass(['', '', '']);
  });

  test('complete all checkbox should update state when items are completed / cleared', async ({ page }) => {
    const toggleAll = page.getByLabel('Mark all as complete');
    await toggleAll.check();
    await expect(toggleAll).toBeChecked();
    await checkNumberOfCompletedTodosInLocalStorage(page, 3);

    // Uncheck first todo.
    const firstTodo = page.getByTestId('todo-item').nth(0);
    await firstTodo.getByRole('checkbox').uncheck();

    // Reuse toggleAll locator and make sure its not checked.
    await expect(toggleAll).not.toBeChecked();

    await firstTodo.getByRole('checkbox').check();
    await checkNumberOfCompletedTodosInLocalStorage(page, 3);

    // Assert the toggle all is checked again.
    await expect(toggleAll).toBeChecked();
  });
});

test.describe('Item', () => {

  test('should allow me to mark items as complete', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?');

    // Create two items.
    for (const item of TODO_ITEMS.slice(0, 2)) {
      await newTodo.fill(item);
      await newTodo.press('Enter');
    }

    // Check first item.
    const firstTodo = page.getByTestId('todo-item').nth(0);
    await firstTodo.getByRole('checkbox').check();
    await expect(firstTodo).toHaveClass('completed');

    // Check second item.
    const secondTodo = page.getByTestId('todo-item').nth(1);
    await expect(secondTodo).not.toHaveClass('completed');
    await secondTodo.getByRole('checkbox').check();

    // Assert completed class.
    await expect(firstTodo).toHaveClass('completed');
    await expect(secondTodo).toHaveClass('completed');
  });

  test('should allow me to un-mark items as complete', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?');

    // Create two items.
    for (const item of TODO_ITEMS.slice(0, 2)) {
      await newTodo.fill(item);
      await newTodo.press('Enter');
    }

    const firstTodo = page.getByTestId('todo-item').nth(0);
    const secondTodo = page.getByTestId('todo-item').nth(1);
    const firstTodoCheckbox = firstTodo.getByRole('checkbox');

    await firstTodoCheckbox.check();
    await expect(firstTodo).toHaveClass('completed');
    await expect(secondTodo).not.toHaveClass('completed');
    await checkNumberOfCompletedTodosInLocalStorage(page, 1);

    await firstTodoCheckbox.uncheck();
    await expect(firstTodo).not.toHaveClass('completed');
    await expect(secondTodo).not.toHaveClass('completed');
    await checkNumberOfCompletedTodosInLocalStorage(page, 0);
  });

  test('should allow me to edit an item', async ({ page }) => {
    await createDefaultTodos(page);

    const todoItems = page.getByTestId('todo-item');
    const secondTodo = todoItems.nth(1);
    await secondTodo.dblclick();
    await expect(secondTodo.getByRole('textbox', { name: 'Edit' })).toHaveValue(TODO_ITEMS[1]);
    await secondTodo.getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');
    await secondTodo.getByRole('textbox', { name: 'Edit' }).press('Enter');

    // Explicitly assert the new text value.
    await expect(todoItems).toHaveText([
      TODO_ITEMS[0],
      'buy some sausages',
      TODO_ITEMS[2]
    ]);
    await checkTodosInLocalStorage(page, 'buy some sausages');
  });
});

test.describe('Editing', () => {
  test.beforeEach(async ({ page }) => {
    await createDefaultTodos(page);
    await checkNumberOfTodosInLocalStorage(page, 3);
  });

  test('should hide other controls when editing', async ({ page }) => {
    const todoItem = page.getByTestId('todo-item').nth(1);
    await todoItem.dblclick();
    await expect(todoItem.getByRole('checkbox')).not.toBeVisible();
    await expect(todoItem.locator('label', {
      hasText: TODO_ITEMS[1],
    })).not.toBeVisible();
    await checkNumberOfTodosInLocalStorage(page, 3);
  });

  test('should save edits on blur', async ({ page }) => {
    const todoItems = page.getByTestId('todo-item');
    await todoItems.nth(1).dblclick();
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).dispatchEvent('blur');

    await expect(todoItems).toHaveText([
      TODO_ITEMS[0],
      'buy some sausages',
      TODO_ITEMS[2],
    ]);
    await checkTodosInLocalStorage(page, 'buy some sausages');
  });

  test('should trim entered text', async ({ page }) => {
    const todoItems = page.getByTestId('todo-item');
    await todoItems.nth(1).dblclick();
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('    buy some sausages    ');
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter');

    await expect(todoItems).toHaveText([
      TODO_ITEMS[0],
      'buy some sausages',
      TODO_ITEMS[2],
    ]);
    await checkTodosInLocalStorage(page, 'buy some sausages');
  });

  test('should remove the item if an empty text string was entered', async ({ page }) => {
    const todoItems = page.getByTestId('todo-item');
    await todoItems.nth(1).dblclick();
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('');
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter');

    await expect(todoItems).toHaveText([
      TODO_ITEMS[0],
      TODO_ITEMS[2],
    ]);
  });

  test('should cancel edits on escape', async ({ page }) => {
    const todoItems = page.getByTestId('todo-item');
    await todoItems.nth(1).dblclick();
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');
    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Escape');
    await expect(todoItems).toHaveText(TODO_ITEMS);
  });
});

test.describe('Counter', () => {
  test('should display the current number of todo items', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?');
    
    // create a todo count locator
    const todoCount = page.getByTestId('todo-count')

    await newTodo.fill(TODO_ITEMS[0]);
    await newTodo.press('Enter');

    await expect(todoCount).toContainText('1');

    await newTodo.fill(TODO_ITEMS[1]);
    await newTodo.press('Enter');
    await expect(todoCount).toContainText('2');

    await checkNumberOfTodosInLocalStorage(page, 2);
  });
});

test.describe('Clear completed button', () => {
  test.beforeEach(async ({ page }) => {
    await createDefaultTodos(page);
  });

  test('should display the correct text', async ({ page }) => {
    await page.locator('.todo-list li .toggle').first().check();
    await expect(page.getByRole('button', { name: 'Clear completed' })).toBeVisible();
  });

  test('should remove completed items when clicked', async ({ page }) => {
    const todoItems = page.getByTestId('todo-item');
    await todoItems.nth(1).getByRole('checkbox').check();
    await page.getByRole('button', { name: 'Clear completed' }).click();
    await expect(todoItems).toHaveCount(2);
    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);
  });

  test('should be hidden when there are no items that are completed', async ({ page }) => {
    await page.locator('.todo-list li .toggle').first().check();
    await page.getByRole('button', { name: 'Clear completed' }).click();
    await expect(page.getByRole('button', { name: 'Clear completed' })).toBeHidden();
  });
});

test.describe('Persistence', () => {
  test('should persist its data', async ({ page }) => {
    // create a new todo locator
    const newTodo = page.getByPlaceholder('What needs to be done?');

    for (const item of TODO_ITEMS.slice(0, 2)) {
      await newTodo.fill(item);
      await newTodo.press('Enter');
    }

    const todoItems = page.getByTestId('todo-item');
    const firstTodoCheck = todoItems.nth(0).getByRole('checkbox');
    await firstTodoCheck.check();
    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]]);
    await expect(firstTodoCheck).toBeChecked();
    await expect(todoItems).toHaveClass(['completed', '']);

    // Ensure there is 1 completed item.
    await checkNumberOfCompletedTodosInLocalStorage(page, 1);

    // Now reload.
    await page.reload();
    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]]);
    await expect(firstTodoCheck).toBeChecked();
    await expect(todoItems).toHaveClass(['completed', '']);
  });
});

test.describe('Routing', () => {
  test.beforeEach(async ({ page }) => {
    await createDefaultTodos(page);
    // make sure the app had a chance to save updated todos in storage
    // before navigating to a new view, otherwise the items can get lost :(
    // in some frameworks like Durandal
    await checkTodosInLocalStorage(page, TODO_ITEMS[0]);
  });

  test('should allow me to display active items', async ({ page }) => {
    const todoItem = page.getByTestId('todo-item');
    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();

    await checkNumberOfCompletedTodosInLocalStorage(page, 1);
    await page.getByRole('link', { name: 'Active' }).click();
    await expect(todoItem).toHaveCount(2);
    await expect(todoItem).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);
  });

  test('should respect the back button', async ({ page }) => {
    const todoItem = page.getByTestId('todo-item'); 
    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();

    await checkNumberOfCompletedTodosInLocalStorage(page, 1);

    await test.step('Showing all items', async () => {
      await page.getByRole('link', { name: 'All' }).click();
      await expect(todoItem).toHaveCount(3);
    });

    await test.step('Showing active items', async () => {
      await page.getByRole('link', { name: 'Active' }).click();
    });

    await test.step('Showing completed items', async () => {
      await page.getByRole('link', { name: 'Completed' }).click();
    });

    await expect(todoItem).toHaveCount(1);
    await page.goBack();
    await expect(todoItem).toHaveCount(2);
    await page.goBack();
    await expect(todoItem).toHaveCount(3);
  });

  test('should allow me to display completed items', async ({ page }) => {
    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();
    await checkNumberOfCompletedTodosInLocalStorage(page, 1);
    await page.getByRole('link', { name: 'Completed' }).click();
    await expect(page.getByTestId('todo-item')).toHaveCount(1);
  });

  test('should allow me to display all items', async ({ page }) => {
    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();
    await checkNumberOfCompletedTodosInLocalStorage(page, 1);
    await page.getByRole('link', { name: 'Active' }).click();
    await page.getByRole('link', { name: 'Completed' }).click();
    await page.getByRole('link', { name: 'All' }).click();
    await expect(page.getByTestId('todo-item')).toHaveCount(3);
  });

  test('should highlight the currently applied filter', async ({ page }) => {
    await expect(page.getByRole('link', { name: 'All' })).toHaveClass('selected');
    
    //create locators for active and completed links
    const activeLink = page.getByRole('link', { name: 'Active' });
    const completedLink = page.getByRole('link', { name: 'Completed' });
    await activeLink.click();

    // Page change - active items.
    await expect(activeLink).toHaveClass('selected');
    await completedLink.click();

    // Page change - completed items.
    await expect(completedLink).toHaveClass('selected');
  });
});

async function createDefaultTodos(page: Page) {
  // create a new todo locator
  const newTodo = page.getByPlaceholder('What needs to be done?');

  for (const item of TODO_ITEMS) {
    await newTodo.fill(item);
    await newTodo.press('Enter');
  }
}

async function checkNumberOfTodosInLocalStorage(page: Page, expected: number) {
  return await page.waitForFunction(e => {
    return JSON.parse(localStorage['react-todos']).length === e;
  }, expected);
}

async function checkNumberOfCompletedTodosInLocalStorage(page: Page, expected: number) {
  return await page.waitForFunction(e => {
    return JSON.parse(localStorage['react-todos']).filter((todo: any) => todo.completed).length === e;
  }, expected);
}

async function checkTodosInLocalStorage(page: Page, title: string) {
  return await page.waitForFunction(t => {
    return JSON.parse(localStorage['react-todos']).map((todo: any) => todo.title).includes(t);
  }, title);
}
</file>

<file path="tests/example.spec.ts">
import { test, expect } from '@playwright/test';

test('has title', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Expect a title "to contain" a substring.
  await expect(page).toHaveTitle(/Playwright/);
});

test('get started link', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Click the get started link.
  await page.getByRole('link', { name: 'Get started' }).click();

  // Expects page to have a heading with the name of Installation.
  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();
});
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="docs/blueprint.md">
# **App Name**: StyleAI

## Core Features:

- Clothing Upload: Upload an image of a single clothing item.
- Model Customization: Customize virtual model attributes (gender, body type, age range, ethnicity) and environment settings (background preset or custom description, lighting, lens/style).
- Image Generation: Generate a new image depicting the customized model wearing the provided clothing item in the specified environment using Google Gemini as a tool.
- Image Display: Display the generated image alongside the original upload for comparison, and the prompt used is shown.
- History: Maintain a history of recent generations (relative image URLs) in the user's browser local storage, displayed as a clickable thumbnail gallery.

## Style Guidelines:

- Primary color: Neutral white or light gray for a clean and modern look.
- Secondary color: A muted blue (#64B5F6) to provide a subtle accent.
- Accent: Teal (#26A69A) for interactive elements and highlights.
- Use a grid-based layout to maintain structure and alignment.
- Use simple, modern icons to represent different customization options.
- Subtle transitions when switching between customization options or loading generated images.

## Original User Request:
An web application that allows users to upload an image of a single clothing item. They can then customize virtual model attributes (gender, body type, age range, ethnicity) and environment settings (background preset or custom description, lighting, lens/style).
Upon clicking 'Generate', the application sends the uploaded image (as base64 data) and selected settings to a backend service. The backend constructs a prompt, uses an AI (specifically Google Gemini per the PRD) with multimodal input (image + text prompt) to generate a new image depicting the customized model wearing the provided clothing item in the specified environment.
The generated image is then displayed alongside the original upload for comparison, and the prompt used is shown. Successfully generated images are stored persistently on the server's local filesystem, with metadata saved in a local JSON file. A history of recent generations (relative image URLs) is maintained in the user's browser local storage, displayed as a clickable thumbnail gallery. The application is designed as a single-page app for anonymous users in its V1 implementation.
</file>

<file path="README.md">
# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.
</file>

<file path="src/components/icons.ts">
import {ArrowRight, Check, ChevronsUpDown, Circle, Copy, Edit, ExternalLink, File, HelpCircle, Home, Loader2, Mail, MessageSquare, Moon, Plus, PlusCircle, Search, Server, Settings, Share2, Shield, Sun, Trash, User, X, Workflow} from 'lucide-react';

const Icons = {
  arrowRight: ArrowRight,
  check: Check,
  chevronDown: ChevronsUpDown,
  circle: Circle,
  workflow: Workflow,
  close: X,
  copy: Copy,
  dark: Moon,
  edit: Edit,
  externalLink: ExternalLink,
  file: File,
  help: HelpCircle,
  home: Home,
  light: Sun,
  loader: Loader2,
  mail: Mail,
  messageSquare: MessageSquare,
  plus: Plus,
  plusCircle: PlusCircle,
  search: Search,
  server: Server,
  settings: Settings,
  share: Share2,
  shield: Shield,
  spinner: Loader2,
  trash: Trash,
  user: User,
};

export {Icons};
</file>

<file path="src/components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border border-border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground border-border",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border border-border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/chart.tsx">
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-hidden [&_.recharts-surface]:outline-hidden",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/form.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/grid.tsx">
"use client";

import * as React from "react"

import { cn } from "@/lib/utils"

interface GridProps extends React.HTMLAttributes<HTMLDivElement> {
  numColumns?: number;
}

const Grid = React.forwardRef<HTMLDivElement, GridProps>(
  ({ className, numColumns = 1, children, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "grid",
          `grid-cols-${numColumns}`,
          className
        )}
        {...props}
      >
        {children}
      </div>
    )
  }
)
Grid.displayName = "Grid"

export { Grid }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/loading-indicator.tsx">
"use client";

import React from 'react';
import { Loader2, AlertCircle } from 'lucide-react';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const loadingVariants = cva(
  "flex items-center gap-2 rounded-md p-2 text-sm font-medium",
  {
    variants: {
      variant: {
        default: "bg-secondary text-secondary-foreground",
        primary: "bg-primary/10 text-primary",
        destructive: "bg-destructive/10 text-destructive",
      },
      size: {
        sm: "text-xs py-1 px-2",
        default: "text-sm py-2 px-3",
        lg: "text-base py-3 px-4",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface LoadingIndicatorProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof loadingVariants> {
  status?: 'loading' | 'error' | 'success';
  message?: string;
  progress?: number; // 0-100
}

/**
 * Enhanced loading indicator component with support for different states and progress
 */
export function LoadingIndicator({
  className,
  variant,
  size,
  status = 'loading',
  message,
  progress,
  ...props
}: LoadingIndicatorProps) {
  return (
    <div
      className={cn(loadingVariants({ variant, size }), className)}
      {...props}
    >
      {status === 'loading' && (
        <Loader2 className="h-4 w-4 animate-spin" />
      )}
      
      {status === 'error' && (
        <AlertCircle className="h-4 w-4 text-destructive" />
      )}
      
      <span>
        {message || (
          status === 'loading' 
            ? 'Loading...' 
            : status === 'error'
              ? 'An error occurred'
              : 'Completed'
        )}
      </span>
      
      {typeof progress === 'number' && progress >= 0 && progress <= 100 && (
        <div className="ml-auto flex items-center gap-2">
          <div className="h-1.5 w-16 overflow-hidden rounded-full bg-background">
            <div 
              className="h-full bg-primary transition-all duration-300 ease-in-out" 
              style={{ width: `${progress}%` }}
            />
          </div>
          <span className="text-xs tabular-nums">{Math.round(progress)}%</span>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/ui/menubar.tsx">
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-hidden focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border border-border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-hidden focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-hidden focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-hidden focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/components/ui/popover.tsx">
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border border-border bg-popover p-4 text-popover-foreground shadow-md outline-hidden data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/radio-group.tsx">
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-hidden focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="src/components/ui/sidebar.tsx">
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-hidden ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-hidden ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-hidden ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b [&_tr]:border-border", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t border-border bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b border-border transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};
</file>

<file path="src/components/ui/toast.tsx">
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border border-border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border border-border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="src/hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/lib/cache-service.ts">
/**
 * Cache service for storing and retrieving generated images
 * Provides TTL support, error handling, and consistent cache key generation
 */

import fs from 'fs/promises';
import path from 'path';
import crypto from 'crypto';
import { existsSync, mkdirSync } from 'fs';
import { GenerateClothingImageInput, GenerateClothingImageOutput } from '@/app/actions';

// Types for cache entries
export interface CacheEntry<T> {
  data: T;
  timestamp: number;
  expiresAt: number | null; // null means no expiration
}

// Cache configuration
interface CacheConfig {
  basePath: string;
  defaultTTL: number | null; // in milliseconds, null means no expiration
}

// Default configuration
const DEFAULT_CONFIG: CacheConfig = {
  basePath: path.join(process.cwd(), '.cache'),
  defaultTTL: 7 * 24 * 60 * 60 * 1000, // 1 week in milliseconds
};

/**
 * Service for caching generated images and related data
 */
export class CacheService {
  private config: CacheConfig;

  constructor(config: Partial<CacheConfig> = {}) {
    this.config = { ...DEFAULT_CONFIG, ...config };
    
    // Ensure cache directory exists
    if (!existsSync(this.config.basePath)) {
      mkdirSync(this.config.basePath, { recursive: true });
    }
  }

  /**
   * Generate a consistent cache key from input parameters
   */
  public createCacheKey(input: GenerateClothingImageInput): string {
    const data = {
      clothingUrl: input.clothingItemUrl,
      model: {
        gender: input.modelGender,
        bodyType: input.modelBodyType,
        ageRange: input.modelAgeRange,
        ethnicity: input.modelEthnicity,
      },
      environment: {
        description: input.environmentDescription,
        lighting: input.lightingStyle,
        lens: input.lensStyle,
      }
    };
    
    // Create a deterministic hash of the input data
    return crypto
      .createHash('md5')
      .update(JSON.stringify(data))
      .digest('hex');
  }

  /**
   * Get the full path to a cache file
   */
  private getCachePath(key: string): string {
    return path.join(this.config.basePath, `${key}.json`);
  }

  /**
   * Store data in the cache with optional TTL
   */
  public async set<T>(
    key: string, 
    data: T, 
    ttl: number | null = this.config.defaultTTL
  ): Promise<void> {
    try {
      const cachePath = this.getCachePath(key);
      const entry: CacheEntry<T> = {
        data,
        timestamp: Date.now(),
        expiresAt: ttl ? Date.now() + ttl : null,
      };
      
      await fs.writeFile(cachePath, JSON.stringify(entry), 'utf-8');
    } catch (error) {
      console.error(`Cache write error for key ${key}:`, error);
      // Fail gracefully - don't throw errors for cache operations
    }
  }

  /**
   * Retrieve data from the cache if it exists and is not expired
   */
  public async get<T>(key: string): Promise<T | null> {
    try {
      const cachePath = this.getCachePath(key);
      
      // Check if cache file exists
      try {
        await fs.access(cachePath);
      } catch {
        return null; // File doesn't exist
      }
      
      // Read and parse cache file
      const data = await fs.readFile(cachePath, 'utf-8');
      const entry = JSON.parse(data) as CacheEntry<T>;
      
      // Check if entry is expired
      if (entry.expiresAt && entry.expiresAt < Date.now()) {
        // Expired entry - delete it asynchronously and return null
        fs.unlink(cachePath).catch(err => 
          console.error(`Failed to delete expired cache entry ${key}:`, err)
        );
        return null;
      }
      
      return entry.data;
    } catch (error) {
      console.error(`Cache read error for key ${key}:`, error);
      return null; // Fail gracefully
    }
  }

  /**
   * Delete a cache entry
   */
  public async delete(key: string): Promise<boolean> {
    try {
      const cachePath = this.getCachePath(key);
      await fs.unlink(cachePath);
      return true;
    } catch (error) {
      console.error(`Cache delete error for key ${key}:`, error);
      return false;
    }
  }

  /**
   * Clear all cache entries
   */
  public async clear(): Promise<boolean> {
    try {
      const files = await fs.readdir(this.config.basePath);
      
      await Promise.all(
        files.map(file => 
          fs.unlink(path.join(this.config.basePath, file))
            .catch(err => console.error(`Failed to delete cache file ${file}:`, err))
        )
      );
      
      return true;
    } catch (error) {
      console.error('Cache clear error:', error);
      return false;
    }
  }

  /**
   * Check if a cache entry exists and is not expired
   */
  public async has(key: string): Promise<boolean> {
    const result = await this.get(key);
    return result !== null;
  }
}

// Export a singleton instance for use throughout the application
export const imageCache = new CacheService({
  basePath: path.join(process.cwd(), '.cache', 'images'),
});
</file>

<file path="src/lib/errors.ts">
/**
 * Custom error types for better error handling throughout the application
 */

// Base application error
export class AppError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'AppError';
  }
}

// Validation errors
export class ValidationError extends AppError {
  constructor(
    message: string,
    public readonly field?: string,
    public readonly details?: any
  ) {
    super(message);
    this.name = 'ValidationError';
  }
}

// API errors
export class ApiError extends AppError {
  constructor(
    message: string,
    public readonly statusCode?: number,
    public readonly details?: any
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

// Image processing errors
export class ImageProcessingError extends AppError {
  constructor(
    message: string,
    public readonly originalError?: Error
  ) {
    super(message);
    this.name = 'ImageProcessingError';
  }
}

// Network errors
export class NetworkError extends AppError {
  constructor(
    message: string,
    public readonly originalError?: Error
  ) {
    super(message);
    this.name = 'NetworkError';
  }
}

// Cache errors
export class CacheError extends AppError {
  constructor(
    message: string,
    public readonly cacheKey?: string,
    public readonly originalError?: Error
  ) {
    super(message);
    this.name = 'CacheError';
  }
}

// AI model errors
export class AIModelError extends AppError {
  constructor(
    message: string,
    public readonly modelName?: string,
    public readonly details?: any
  ) {
    super(message);
    this.name = 'AIModelError';
  }
}

// Helper function to convert unknown errors to AppError
export function toAppError(error: unknown): AppError {
  if (error instanceof AppError) {
    return error;
  }
  
  if (error instanceof Error) {
    // Check for specific error types based on message or properties
    if (error.message.includes('network') || error.message.includes('fetch')) {
      return new NetworkError(error.message, error);
    }
    
    if (error.message.includes('image') || error.message.includes('png') || 
        error.message.includes('jpg') || error.message.includes('webp')) {
      return new ImageProcessingError(error.message, error);
    }
    
    // Default to generic AppError
    return new AppError(error.message);
  }
  
  // For non-Error objects
  return new AppError(
    typeof error === 'string' 
      ? error 
      : 'An unknown error occurred'
  );
}

// Error response type for API responses
export type ErrorResponse = {
  code: string;
  message: string;
  details?: any;
};
</file>

<file path="src/lib/prompt-builder.ts">
/**
 * PromptBuilder - A utility for constructing well-structured prompts for the AI model
 * 
 * This helps create consistent, high-quality prompts that lead to better generation results.
 */

import { ModelSettings, EnvironmentSettings } from '@/types';

export class PromptBuilder {
  private sections: string[] = [];
  
  constructor() {
    // Initialize with system context
    this.addSystemContext();
  }

  /**
   * Add system context to help guide the AI model
   */
  private addSystemContext(): this {
    this.sections.push(
      "Generate a photorealistic image of a virtual model wearing the provided clothing item with the following specifications:"
    );
    return this;
  }

  /**
   * Add model attributes section
   */
  public addModelAttributes(settings: ModelSettings): this {
    this.sections.push(
      "Model Attributes:",
      `- Gender: ${settings.gender}`,
      `- Body Type: ${settings.bodyType}`,
      `- Age Range: ${settings.ageRange}`,
      `- Ethnicity: ${settings.ethnicity}`
    );
    return this;
  }

  /**
   * Add environment settings section
   */
  public addEnvironmentSettings(settings: EnvironmentSettings): this {
    this.sections.push(
      "Environment Settings:",
      `- Background: ${settings.description}`,
      `- Lighting: ${settings.lighting}`,
      `- Lens Style: ${settings.lensStyle}`
    );
    return this;
  }

  /**
   * Add specific instructions for the AI model
   */
  public addInstructions(): this {
    this.sections.push(
      "Instructions:",
      "- Create a photorealistic image that clearly shows the model wearing the provided clothing item",
      "- Ensure the clothing item is clearly visible and properly fitted to the model",
      "- Maintain natural proportions and realistic lighting",
      "- The model should be in a natural pose that showcases the clothing item well",
      "- The image should be high quality and suitable for e-commerce use"
    );
    return this;
  }

  /**
   * Add custom section to the prompt
   */
  public addCustomSection(title: string, lines: string[]): this {
    this.sections.push(title, ...lines.map(line => `- ${line}`));
    return this;
  }

  /**
   * Build the final prompt string
   */
  public build(): string {
    return this.sections.join('\n\n');
  }

  /**
   * Create a complete prompt from model and environment settings
   */
  public static createPrompt(
    modelSettings: ModelSettings,
    environmentSettings: EnvironmentSettings
  ): string {
    return new PromptBuilder()
      .addModelAttributes(modelSettings)
      .addEnvironmentSettings(environmentSettings)
      .addInstructions()
      .build();
  }
}
</file>

<file path="src/types/index.ts">
/**
 * Common types used throughout the application
 */

// Model settings
export interface ModelSettings {
  gender: 'male' | 'female' | 'non-binary';
  bodyType: 'slim' | 'athletic' | 'average' | 'plus-size';
  ageRange: '18-25' | '26-35' | '36-45' | '46-60' | '60+';
  ethnicity: 'caucasian' | 'black' | 'asian' | 'hispanic' | 'middle-eastern' | 'mixed';
}

// Environment settings
export interface EnvironmentSettings {
  description: string;
  lighting: 'natural' | 'studio' | 'soft' | 'dramatic' | 'bright';
  lensStyle: 'portrait' | 'fashion' | 'product' | 'editorial' | 'casual';
}

// Generation result
export interface GenerationResult {
  originalImageUrl: string;
  generatedImageUrl: string;
  promptUsed: string;
  timestamp: number;
  modelSettings: ModelSettings;
  environmentSettings: EnvironmentSettings;
}

// API response types
export interface ApiResponse<T> {
  data?: T;
  error?: {
    code: string;
    message: string;
    details?: any;
  };
}

// Generation history entry
export interface HistoryEntry {
  id: string;
  originalImage: string;
  generatedImage: string;
  timestamp: number;
  modelSettings?: ModelSettings;
  environmentSettings?: EnvironmentSettings;
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

.genkit/*
.aider*
.env
.cache/*
.idx*/*
.env
package-lock.json
.env

# Playwright
node_modules/
/test-results/
/playwright-report/
/blob-report/
/playwright/.cache/
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    '@tailwindcss/postcss': {}, // Changed from 'tailwindcss' to '@tailwindcss/postcss'
    // autoprefixer: {}, // Add if needed
  },
};

export default config;
</file>

<file path="src/app/layout.tsx">
import type {Metadata} from 'next';
import {Geist, Geist_Mono} from 'next/font/google';
import './globals.css';
import {Avatar, AvatarFallback, AvatarImage} from "@/components/ui/avatar";

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'StyleAI - Virtual Fashion App',
  description: 'Virtually try on clothes using AI models.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
      <header className="bg-background border-b">
        <div className="container flex items-center justify-between h-16">
          <a href="/" className="text-2xl font-bold">
            StyleAI
          </a>
          <div className="flex items-center space-x-4">
            <Avatar>
              <AvatarImage src="https://github.com/shadcn.png" alt="@shadcn" />
              <AvatarFallback>CN</AvatarFallback>
            </Avatar>
            <span className="text-sm font-medium">John Doe</span>
          </div>
        </div>
      </header>
      <main className="container mx-auto py-10">
        {children}
      </main>
      </body>
    </html>
  );
}
</file>

<file path="src/components/ui/accordion.tsx">
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    // V4 Fix: Added explicit border color
    className={cn("border-b border-border", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        // No outline-none needed here usually, relies on browser default or ring
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    // V4 Fix: Use custom utilities defined in globals.css
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[",
        // V4 Fix: Added explicit border color
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

// ... (AlertDialogHeader, AlertDialogFooter, AlertDialogTitle, AlertDialogDescription - no changes needed)

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    // Button variant handles focus styles, including outline-hidden/ring
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    // Button variant handles focus styles, including outline-hidden/ring
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  // V4 Fix: Added explicit base border color (using var(--color-border) defined in @theme)
  "relative w-full rounded-lg border border-border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        // V4 Fix: Destructive variant explicitly sets its border color now
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

// ... (AlertTitle, AlertDescription - no changes needed)
const AlertTitle = React.forwardRef<
  HTMLHeadingElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";


export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/lib/store.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

// Define specific literal types based on UI options and expected schema
export type Gender = "male" | "female" | "non-binary";
export type BodyType = "slim" | "athletic" | "average" | "plus-size";
export type AgeRange = "18-25" | "26-35" | "36-45" | "46-60" | "60+";
export type Ethnicity = "caucasian" | "black" | "asian" | "hispanic" | "middle-eastern" | "mixed";
export type EnvironmentDescription = "studio" | "outdoor" | "urban" | "beach"; // Assuming these cover the schema
export type LightingStyle = "natural" | "studio" | "soft" | "dramatic" | "bright";
export type LensStyle = "portrait" | "fashion" | "product" | "editorial" | "casual";


// Update type definitions to use literal types
type ModelSettings = {
  gender: Gender;
  bodyType: BodyType;
  ageRange: AgeRange;
  ethnicity: Ethnicity;
};

type EnvironmentSettings = {
  description: EnvironmentDescription; // Use specific type if schema requires it, otherwise string might be okay if description is freeform
  lighting: LightingStyle;
  lensStyle: LensStyle;
};

type HistoryEntry = {
  id: string;
  originalImage: string; // Can be base64 or URL
  generatedImage: string; // Should be the persistent URL
  timestamp: number;
  // Optional: Could store settings used for this generation
  // modelSettings?: ModelSettings;
  // environmentSettings?: EnvironmentSettings;
};

type GenerationState = {
  // Images
  originalImage: string | null;
  generatedImage: string | null;
  // Settings
  modelSettings: ModelSettings;
  environmentSettings: EnvironmentSettings;
  // UI state
  isLoading: boolean;
  error: { message: string } | null;
  // History
  history: Array<HistoryEntry>;
  // Actions
  setOriginalImage: (url: string | null) => void; // Allow null for clearing
  setGeneratedImage: (url: string | null) => void; // Allow null for clearing
  setModelSettings: (settings: Partial<ModelSettings>) => void;
  setEnvironmentSettings: (settings: Partial<EnvironmentSettings>) => void;
  setLoading: (isLoading: boolean) => void;
  setError: (error: { message: string } | null) => void;
  addToHistory: (entry: { originalImage: string; generatedImage: string }) => void;
  clearHistory: () => void;
  // Optional: Action to restore state from history
  // restoreFromHistory: (id: string) => void;
};

export const useGenerationStore = create<GenerationState>()(
  persist(
    (set, get) => ({ // Added get to access state in actions if needed
      // Initial state (ensure values match literal types)
      originalImage: null,
      generatedImage: null,
      modelSettings: {
        gender: 'female',
        bodyType: 'average',
        ageRange: '26-35', // Corrected initial value
        ethnicity: 'caucasian',
      },
      environmentSettings: {
        description: 'studio', // Corrected initial value (assuming 'studio' is valid)
        lighting: 'soft',
        lensStyle: 'portrait',
      },
      isLoading: false,
      error: null,
      history: [],

      // Actions
      setOriginalImage: (url) => set({ originalImage: url, generatedImage: null, error: null }), // Clear generated/error on new upload
      setGeneratedImage: (url) => set({ generatedImage: url }),
      setModelSettings: (settings) =>
        set((state) => ({
          modelSettings: { ...state.modelSettings, ...settings }
        })),
      setEnvironmentSettings: (settings) =>
        set((state) => ({
          environmentSettings: { ...state.environmentSettings, ...settings }
        })),
      setLoading: (isLoading) => set({ isLoading }),
      setError: (error) => set({ error }),
      addToHistory: (entry: { originalImage: string; generatedImage: string }) =>
        set((state) => {
          // Prevent adding duplicates based on generated image URL? (Optional)
          // if (state.history.some(h => h.generatedImage === entry.generatedImage)) {
          //   return {}; // Don't add if already exists
          // }
          const newHistoryEntry: HistoryEntry = {
            id: Date.now().toString(),
            originalImage: entry.originalImage,
            generatedImage: entry.generatedImage,
            timestamp: Date.now(),
            // Optional: Capture settings at time of generation
            // modelSettings: state.modelSettings,
            // environmentSettings: state.environmentSettings,
          };
          return {
            history: [newHistoryEntry, ...state.history].slice(0, 20), // Limit history size
          };
        }),
      clearHistory: () => set({ history: [] }),
      // Optional: Implement restoreFromHistory action
      // restoreFromHistory: (id) => {
      //   const historyEntry = get().history.find(h => h.id === id);
      //   if (historyEntry) {
      //     set({
      //       originalImage: historyEntry.originalImage,
      //       generatedImage: historyEntry.generatedImage,
      //       // Optional: Restore settings if saved
      //       // modelSettings: historyEntry.modelSettings || get().modelSettings,
      //       // environmentSettings: historyEntry.environmentSettings || get().environmentSettings,
      //       isLoading: false,
      //       error: null,
      //     });
      //   }
      // },
    }),
    {
      name: 'styleai-storage',
      // Only persist settings and history
      partialize: (state) => ({
        modelSettings: state.modelSettings,
        environmentSettings: state.environmentSettings,
        history: state.history,
      }),
    }
  )
);
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Checks if a string is a valid base64 image Data URI.
 */
export const isDataURI = (uri: string): boolean => /^data:image\/[a-zA-Z]+;base64,/.test(uri);
</file>

<file path="src/lib/validation.ts">
/**
 * Validation schemas and utilities for input validation
 */

import { z } from 'zod';
import { ValidationError } from './errors';
import { isDataURI } from './utils';

// Base model settings schema
export const modelSettingsSchema = z.object({
  gender: z.enum(['male', 'female', 'non-binary']),
  bodyType: z.enum(['slim', 'athletic', 'average', 'plus-size']),
  ageRange: z.enum(['18-25', '26-35', '36-45', '46-60', '60+']),
  ethnicity: z.enum(['caucasian', 'black', 'asian', 'hispanic', 'middle-eastern', 'mixed']),
});

// Environment settings schema
export const environmentSettingsSchema = z.object({
  description: z.string().min(3).max(200),
  lighting: z.enum(['natural', 'studio', 'soft', 'dramatic', 'bright']),
  lensStyle: z.enum(['portrait', 'fashion', 'product', 'editorial', 'casual']),
});

// URL validation schema with better error messages
export const urlSchema = z.string().url({
  message: "Please enter a valid URL starting with http:// or https://",
}).refine(
  (url) => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  },
  {
    message: "The URL format is invalid",
  }
);

// Schema allowing HTTP(S) URLs or base64 image Data URIs
export const imageUrlOrDataUriSchema = z.string().refine(
  (val) => isDataURI(val) || /^(https?:\/\/)/.test(val),
  { message: "Must be a valid URL starting with http(s):// or a base64 image Data URI" }
).pipe(z.string().min(20, { message: "Input seems too short to be a valid URL or Data URI" })); // Basic length check

// Image URL validation with additional checks (applied only if it's a URL)
export const imageUrlSchema = imageUrlOrDataUriSchema.refine(
  (url) => {
    // If it's a Data URI, skip the extension check
    if (isDataURI(url)) {
      return true;
    }
    // Otherwise, perform checks for URLs
    const lowerUrl = url.toLowerCase();
    return (
      lowerUrl.endsWith('.jpg') ||
      lowerUrl.endsWith('.jpeg') ||
      lowerUrl.endsWith('.png') ||
      lowerUrl.endsWith('.webp') ||
      lowerUrl.endsWith('.gif') ||
      lowerUrl.includes('image') ||
      // Allow URLs that might be image APIs without extensions
      lowerUrl.includes('picsum') ||
      lowerUrl.includes('pngimg') ||
      lowerUrl.includes('placeholder')
    );
  },
  {
    message: "The URL doesn't appear to be an image. Please provide a direct link to an image file.",
  }
);

// Generation input schema with detailed validation
export const generateClothingImageInputSchema = z.object({
  clothingItemUrl: imageUrlOrDataUriSchema, // Use the schema that allows Data URI or URL
  modelGender: modelSettingsSchema.shape.gender,
  modelBodyType: modelSettingsSchema.shape.bodyType,
  modelAgeRange: modelSettingsSchema.shape.ageRange,
  modelEthnicity: modelSettingsSchema.shape.ethnicity,
  environmentDescription: environmentSettingsSchema.shape.description,
  lightingStyle: environmentSettingsSchema.shape.lighting,
  lensStyle: environmentSettingsSchema.shape.lensStyle,
});

// Helper function to validate with better error handling
export function validate<T>(schema: z.ZodSchema<T>, data: unknown): T {
  try {
    return schema.parse(data);
  } catch (error) {
    if (error instanceof z.ZodError) {
      // Get the first error for a cleaner user experience
      const firstError = error.errors[0];
      const field = firstError.path.join('.');
      throw new ValidationError(
        firstError.message,
        field,
        error.errors
      );
    }
    throw error;
  }
}

// Validate image URL specifically
export function validateImageUrl(url: string): string {
  return validate(imageUrlSchema, url);
}
</file>

<file path="src/types/actions.ts">
import { z } from 'zod';
import { generateClothingImageInputSchema } from '@/lib/validation';

// Input type for the generateClothingImage function - Inferred from Zod schema
export type GenerateClothingImageInput = z.infer<typeof generateClothingImageInputSchema>;

// Output type for the generateClothingImage function
export type GenerateClothingImageOutput = {
  generatedImageUrl: string; // Will become persistent URL later
  promptUsed: string;
};

// Error response type
export type GenerationError = {
  code: 'API_ERROR' | 'VALIDATION_ERROR' | 'PROCESSING_ERROR' | 'NETWORK_ERROR';
  message: string;
  details?: any;
};
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
} satisfies Config;
</file>

<file path="src/components/ClothingUpload.tsx">
"use client";

import { useState, useCallback } from 'react';
import { Button } from "@/components/ui/button"; // Keep Button if needed for manual select fallback
import { Progress } from "@/components/ui/progress"; // Import Progress
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"; // Import Alert
import { useDropzone } from 'react-dropzone';
import { FileImage, Upload, CheckCircle, AlertCircle } from 'lucide-react'; // Import icons
import { useGenerationStore } from '@/lib/store';
import { cn } from "@/lib/utils"; // Import cn for conditional classes

const ClothingUpload = () => {
  // Removed local image state
  const { setOriginalImage } = useGenerationStore();
  const [uploadStatus, setUploadStatus] = useState<'idle' | 'uploading' | 'success' | 'error'>('idle');
  const [uploadProgress, setUploadProgress] = useState<number>(0);
  const [uploadError, setUploadError] = useState<string | null>(null);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (!file) return;

    setUploadStatus('uploading');
    setUploadProgress(0);
    setUploadError(null);

    const reader = new FileReader();

    // Simulate progress (replace with actual progress if using a real upload API)
    let progress = 0;
    const interval = setInterval(() => {
      progress += 10;
      if (progress <= 90) { // Stop simulation before onload completes it
        setUploadProgress(progress);
      } else {
        clearInterval(interval);
      }
    }, 100); // Adjust interval timing as needed

    reader.onloadend = () => {
      clearInterval(interval); // Ensure interval is cleared
      const imageUrl = reader.result as string;
      setOriginalImage(imageUrl); // Set image in store
      setUploadProgress(100);
      setUploadStatus('success');
      // Optionally reset status after a delay
      setTimeout(() => {
        setUploadStatus('idle');
        setUploadProgress(0);
      }, 3000); // Reset after 3 seconds
    };

    reader.onerror = () => {
      clearInterval(interval); // Ensure interval is cleared
      console.error("File reading failed");
      setUploadError("Failed to read the file. Please try again.");
      setUploadStatus('error');
      setUploadProgress(0);
      // Optionally reset status after a delay
       setTimeout(() => {
        setUploadStatus('idle');
        setUploadError(null);
      }, 5000); // Reset after 5 seconds
    };

    reader.readAsDataURL(file);
  }, [setOriginalImage]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: { 'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp'] },
    multiple: false, // Ensure only one file is accepted
    onDragEnter: () => {}, // Can add visual feedback hooks here
    onDragLeave: () => {},
  });

  // Removed displayImage logic

  return (
    <div className="space-y-4"> {/* Added space-y */}
      <h2 className="text-lg font-semibold">Upload Clothing Item</h2>
      <div
        {...getRootProps()}
        className={cn(
          "flex flex-col items-center justify-center w-full min-h-[12rem] p-6 border-2 border-dashed rounded-md cursor-pointer transition-colors", // Adjusted padding and min-height
          isDragActive ? "border-primary bg-primary/10" : "border-muted-foreground/50 hover:border-primary/70",
          uploadStatus === 'error' ? "border-destructive bg-destructive/10" : "",
          uploadStatus === 'success' ? "border-green-500 bg-green-500/10" : ""
        )}
      >
        <input {...getInputProps()} />
        {uploadStatus === 'idle' && (
          <div className="text-center text-muted-foreground">
            <Upload className="mx-auto h-10 w-10 mb-3 text-gray-400" />
            {isDragActive ? (
              <p className="font-semibold">Drop the image here...</p>
            ) : (
              <>
                <p className="font-semibold">Drag & drop or click to upload</p>
                <p className="text-xs mt-1">PNG, JPG, GIF, WEBP</p>
              </>
            )}
          </div>
        )}
        {uploadStatus === 'uploading' && (
          <div className="w-full max-w-xs text-center">
            <Progress value={uploadProgress} className="mb-2 h-2" />
            <p className="text-sm font-medium">Uploading... {uploadProgress}%</p>
          </div>
        )}
        {uploadStatus === 'success' && (
          <div className="text-center text-green-600">
            <CheckCircle className="mx-auto h-10 w-10 mb-3" />
            <p className="font-semibold">Upload Complete!</p>
          </div>
        )}
        {uploadStatus === 'error' && (
           <div className="w-full text-center text-destructive">
             <AlertCircle className="mx-auto h-10 w-10 mb-3" />
             <p className="font-semibold">Upload Failed</p>
             <p className="text-sm mt-1">{uploadError || "An unknown error occurred."}</p>
           </div>
        )}
      </div>
      {/* Removed the preview image section */}
      {/* Removed the "No image uploaded yet" text section */}
    </div>
  );
};

export default ClothingUpload;
</file>

<file path="src/components/GenerationHistory.tsx">
"use client";

import { useEffect, useState } from 'react';
import Image from 'next/image';
import { useGenerationStore } from '@/lib/store';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Trash2, History } from 'lucide-react'; // Added History icon
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"; // Import Accordion components

export default function GenerationHistory() {
  const { history, setOriginalImage, setGeneratedImage, clearHistory } = useGenerationStore();
  const [visibleItems, setVisibleItems] = useState<string[]>([]);

  // Intersection observer for lazy loading images
  useEffect(() => {
    if (typeof window === 'undefined' || !history.length) return;
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            setVisibleItems(prev => [...new Set([...prev, entry.target.id])]);
          }
        });
      },
      { rootMargin: '200px' }
    );
    const historyItems = document.querySelectorAll('.history-item-card');
    historyItems.forEach(item => observer.observe(item));
    return () => {
      historyItems.forEach(item => observer.unobserve(item));
    };
  }, [history]);

  const handleRestore = (item: typeof history[0]) => {
    setOriginalImage(item.originalImage);
    setGeneratedImage(item.generatedImage);
  };

  // Use Accordion for collapsibility
  return (
    <Accordion type="single" collapsible className="w-full" defaultValue="history-item">
      <AccordionItem value="history-item">
        <AccordionTrigger className="text-xl font-semibold px-1 flex justify-between items-center w-full">
          <div className="flex items-center"> {/* Group title and icon */}
             <History className="h-5 w-5 mr-2" /> {/* Optional: Add icon */}
             Generation History
          </div>
          {/* Clear button moved inside trigger for better alignment when collapsed */}
          {history.length > 0 && (
             <Button
                variant="ghost"
                size="sm"
                onClick={(e) => {
                  e.stopPropagation(); // Prevent accordion toggle
                  clearHistory();
                }}
                className="text-muted-foreground hover:text-destructive mr-2" // Adjusted margin
                aria-label="Clear History"
              >
                <Trash2 className="h-4 w-4 mr-1" /> Clear
              </Button>
          )}
        </AccordionTrigger>
        <AccordionContent>
          {history.length === 0 ? (
            <div className="text-center py-4 px-4 border rounded-md bg-muted/50 mt-2">
              <p className="text-sm text-muted-foreground">No history yet.</p>
              <p className="text-xs text-muted-foreground mt-1">Generated images will appear here.</p>
            </div>
          ) : (
            <ScrollArea className="max-h-[40vh] w-full rounded-md border p-2 mt-2">
              <div className="space-y-3 pr-2">
                {history.map((item) => (
                  <Card
                    key={item.id}
                    id={item.id}
                    className="history-item-card cursor-pointer hover:bg-muted/80 transition-colors"
                    onClick={() => handleRestore(item)}
                  >
                    <CardContent className="p-2 flex items-center gap-3">
                      <div className="flex gap-1">
                        {/* Original Thumbnail */}
                        <div className="relative w-16 h-16 rounded overflow-hidden border bg-muted flex-shrink-0">
                          {visibleItems.includes(item.id) ? (
                            <Image
                              src={item.originalImage}
                              alt="Original Item Thumbnail"
                              fill
                              sizes="64px"
                              className="object-cover"
                              loading="lazy"
                            />
                          ) : (
                            <Skeleton className="w-full h-full" />
                          )}
                        </div>
                        {/* Generated Thumbnail */}
                        <div className="relative w-16 h-16 rounded overflow-hidden border bg-muted flex-shrink-0">
                          {visibleItems.includes(item.id) ? (
                            <Image
                              src={item.generatedImage}
                              alt="Generated Result Thumbnail"
                              fill
                              sizes="64px"
                              className="object-cover"
                              loading="lazy"
                            />
                          ) : (
                            <Skeleton className="w-full h-full" />
                          )}
                        </div>
                      </div>
                      <div className="text-xs text-muted-foreground text-right flex-grow">
                         <p>{new Date(item.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>
                         <p>{new Date(item.timestamp).toLocaleDateString()}</p>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </ScrollArea>
          )}
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  );
}
</file>

<file path="next.config.ts">
import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    // Ensure type errors are caught during build
    ignoreBuildErrors: false,
  },
  eslint: {
    // Ensure linting errors are caught during build
    ignoreDuringBuilds: false,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'pngimg.com',
        port: '',
        pathname: '/uploads/**',
      },
      {
        protocol: 'https',
        hostname: 'picsum.photos',
        port: '',
        pathname: '/**',
      },
      // Add any other image sources you might use
    ],
    // Optimize image formats
    formats: ['image/avif', 'image/webp'],
    // Set reasonable image cache duration
    minimumCacheTTL: 60 * 60 * 24 * 7, // 1 week
    // Disable static image imports if not needed
    disableStaticImages: false,
  },
  // Disable x-powered-by header for slightly better security
  poweredByHeader: false,
};

export default nextConfig;
</file>

<file path="src/app/globals.css">
/* Import Tailwind CSS v4 */
@import "tailwindcss";

/*
 * Tailwind CSS v4 Theme Definition
 * Define all theme tokens (colors, spacing, fonts, breakpoints, etc.) here.
 * These replace the `theme.extend` section from tailwind.config.js/ts.
 */
@theme {
  /* Breakpoints (Example - Add as needed) */
  /* --breakpoint-sm: 640px; */
  /* --breakpoint-md: 768px; */
  /* --breakpoint-lg: 1024px; */
  /* --breakpoint-xl: 1280px; */

  /* Radii (from original config) */
  --radius: 0.75rem;
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  /* Base Colors (Light Mode - from :root) */
  --color-background: hsl(220, 14%, 96%); /* Light Gray */
  --color-foreground: hsl(220, 10%, 39%); /* Dark Gray */
  --color-card: hsl(0, 0%, 100%);
  --color-card-foreground: hsl(222.2, 84%, 4.9%);
  --color-popover: hsl(0, 0%, 100%);
  --color-popover-foreground: hsl(222.2, 84%, 4.9%);
  --color-primary: hsl(220, 76%, 48%); /* Muted Blue */
  --color-primary-foreground: hsl(0, 0%, 100%);
  --color-secondary: hsl(210, 22%, 88%);
  --color-secondary-foreground: hsl(222.2, 47.2%, 11.2%);
  --color-muted: hsl(210, 40%, 96.1%);
  --color-muted-foreground: hsl(215.4, 16.3%, 46.9%);
  --color-accent: hsl(142, 76%, 36%); /* Teal */
  --color-accent-foreground: hsl(0, 0%, 100%);
  --color-destructive: hsl(0, 63%, 56%);
  --color-destructive-foreground: hsl(210, 20%, 98%);
  --color-border: hsl(214.3, 31.8%, 91.4%);
  --color-input: hsl(214.3, 31.8%, 91.4%);
  --color-ring: hsl(220, 71%, 59%);

  /* Chart Colors */
  --color-chart-1: hsl(12, 76%, 61%);
  --color-chart-2: hsl(173, 58%, 39%);
  --color-chart-3: hsl(197, 37%, 24%);
  --color-chart-4: hsl(43, 74%, 66%);
  --color-chart-5: hsl(27, 87%, 67%);

  /* Sidebar Colors (Light Mode) */
  --color-sidebar-background: hsl(0, 0%, 98%);
  --color-sidebar-foreground: hsl(240, 5.3%, 26.1%);
  --color-sidebar-primary: hsl(240, 5.9%, 10%);
  --color-sidebar-primary-foreground: hsl(0, 0%, 98%);
  --color-sidebar-accent: hsl(240, 4.8%, 95.9%);
  --color-sidebar-accent-foreground: hsl(240, 5.9%, 10%);
  --color-sidebar-border: hsl(220, 13%, 91%);
  --color-sidebar-ring: hsl(217.2, 91.2%, 59.8%);
}

/* Base Layer - Apply foundational styles */
@layer base {
  /* Apply base variables for background/foreground */
  body {
    @apply bg-background text-foreground;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  /* Dark Mode Variable Overrides */
  .dark {
    --color-background: hsl(215, 14%, 13%); /* Dark Gray */
    --color-foreground: hsl(210, 20%, 98%); /* Off-White */
    --color-card: hsl(222.2, 84%, 4.9%);
    --color-card-foreground: hsl(210, 20%, 98%);
    --color-popover: hsl(222.2, 84%, 4.9%);
    --color-popover-foreground: hsl(210, 20%, 98%);
    --color-primary: hsl(220, 76%, 48%); /* Muted Blue */
    --color-primary-foreground: hsl(0, 0%, 100%);
    --color-secondary: hsl(217.2, 32.6%, 17.5%);
    --color-secondary-foreground: hsl(210, 20%, 98%);
    --color-muted: hsl(216, 34%, 17%);
    --color-muted-foreground: hsl(215, 20.2%, 65.1%);
    --color-accent: hsl(142, 76%, 36%); /* Teal */
    --color-accent-foreground: hsl(210, 20%, 98%);
    --color-destructive: hsl(0, 63%, 56%);
    --color-destructive-foreground: hsl(210, 20%, 98%);
    --color-border: hsl(217.2, 32.6%, 17.5%);
    --color-input: hsl(217.2, 32.6%, 17.5%);
    --color-ring: hsl(224.3, 76.3%, 48%);

    /* Dark Chart Colors */
    --color-chart-1: hsl(220, 70%, 50%);
    --color-chart-2: hsl(160, 60%, 45%);
    --color-chart-3: hsl(30, 80%, 55%);
    --color-chart-4: hsl(280, 65%, 60%);
    --color-chart-5: hsl(340, 75%, 55%);

    /* Dark Sidebar Colors */
    --color-sidebar-background: hsl(240, 5.9%, 10%);
    --color-sidebar-foreground: hsl(240, 4.8%, 95.9%);
    --color-sidebar-primary: hsl(224.3, 76.3%, 48%);
    --color-sidebar-primary-foreground: hsl(0, 0%, 100%);
    --color-sidebar-accent: hsl(240, 3.7%, 15.9%);
    --color-sidebar-accent-foreground: hsl(240, 4.8%, 95.9%);
    --color-sidebar-border: hsl(240, 3.7%, 15.9%);
    --color-sidebar-ring: hsl(217.2, 91.2%, 59.8%);
  }

  *, ::before, ::after {
    border-color: var(--color-border, currentColor);
  }

  input::placeholder,
  textarea::placeholder {
    color: var(--color-muted-foreground);
    opacity: 1;
  }

  button:not(:disabled), [role="button"]:not(:disabled) {
    cursor: pointer;
  }

  dialog {
    margin: auto;
  }
}

/* Define Keyframes for Animations */
@keyframes accordion-down {
  from { height: 0; opacity: 0; }
  to { height: var(--radix-accordion-content-height); opacity: 1; }
}

@keyframes accordion-up {
  from { height: var(--radix-accordion-content-height); opacity: 1; }
  to { height: 0; opacity: 0; }
}

/* Define Custom Utilities using @utility */
@utility animate-accordion-down {
  animation: accordion-down 0.2s ease-out;
}

@utility animate-accordion-up {
  animation: accordion-up 0.2s ease-out;
}

/* --- Custom Component Styles (Using @apply - Consider Refactoring Later) --- */
/* These will now correctly use variables defined in @theme */
/* For better v4 practice, consider using @utility or applying utilities directly in JSX */
.container {
  @apply mx-auto px-4 py-8;
}

.form-container {
  @apply bg-card rounded-lg shadow-md p-6;
}

.form-title {
  @apply text-2xl font-semibold mb-4 text-center;
}

.form-group {
  @apply mb-4;
}

.form-label {
  @apply block text-sm font-medium text-foreground mb-2;
}

.form-input {
  @apply shadow appearance-none border border-input rounded-md w-full py-2 px-3 text-foreground leading-tight focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2;
}

.button-primary {
  @apply bg-primary hover:bg-primary/90 text-primary-foreground font-bold py-2 px-4 rounded focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2;
}

.button-secondary {
  @apply bg-secondary hover:bg-secondary/80 text-secondary-foreground font-bold py-2 px-4 rounded focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2;
}

.image-display {
  @apply mt-8 flex justify-center;
}

.image-display img {
  @apply rounded-lg shadow-lg;
}

.history-container {
  @apply mt-8;
}

.history-title {
  @apply text-xl font-semibold mb-4;
}

.history-grid {
  @apply grid grid-cols-3 gap-4;
}

.history-item {
  @apply rounded-lg shadow-md overflow-hidden;
}

.history-item img {
  @apply w-full h-auto;
}

  /* --- Optional: Restore V3 Defaults (Uncomment if needed) --- */
  /*
  *, ::before, ::after {
    border-color: var(--color-border, currentColor);
  }

  input::placeholder,
  textarea::placeholder {
    color: var(--color-muted-foreground);
    opacity: 1;
  }

  button:not(:disabled), [role="button"]:not(:disabled) {
    cursor: pointer;
  }

  dialog {
    margin: auto;
  }
  */


/* Define Keyframes for Animations */
@keyframes accordion-down {
  from { height: 0; opacity: 0; }
  to { height: var(--radix-accordion-content-height); opacity: 1; }
}

@keyframes accordion-up {
  from { height: var(--radix-accordion-content-height); opacity: 1; }
  to { height: 0; opacity: 0; }
}

/* Define Custom Utilities using @utility */
@utility animate-accordion-down {
  animation: accordion-down 0.2s ease-out;
}

@utility animate-accordion-up {
  animation: accordion-up 0.2s ease-out;
}

/* --- Custom Component Styles (Using @apply - Consider Refactoring Later) --- */
/* These will now correctly use variables defined in @theme */
/* For better v4 practice, consider using @utility or applying utilities directly in JSX */
.container {
  @apply mx-auto px-4 py-8;
}

.form-container {
  @apply bg-card rounded-lg shadow-md p-6;
}

.form-title {
  @apply text-2xl font-semibold mb-4 text-center;
}

.form-group {
  @apply mb-4;
}

.form-label {
  @apply block text-sm font-medium text-foreground mb-2;
}

.form-input {
  @apply shadow appearance-none border border-input rounded-md w-full py-2 px-3 text-foreground leading-tight focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2;
}

.button-primary {
  @apply bg-primary hover:bg-primary/90 text-primary-foreground font-bold py-2 px-4 rounded focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2;
}

.button-secondary {
  @apply bg-secondary hover:bg-secondary/80 text-secondary-foreground font-bold py-2 px-4 rounded focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2;
}

.image-display {
  @apply mt-8 flex justify-center;
}

.image-display img {
  @apply rounded-lg shadow-lg;
}

.history-container {
  @apply mt-8;
}

.history-title {
  @apply text-xl font-semibold mb-4;
}

.history-grid {
  @apply grid grid-cols-3 gap-4;
}

.history-item {
  @apply rounded-lg shadow-md overflow-hidden;
}

.history-item img {
  @apply w-full h-auto;
}

/* Responsive Design */
@media (max-width: 768px) {
  .history-grid {
    @apply grid-cols-2;
  }
}

@media (max-width: 480px) {
  .history-grid {
    @apply grid-cols-1;
  }
}
</file>

<file path="src/app/page.tsx">
"use client";

import ClothingUpload from '@/components/ClothingUpload';
import ImageDisplay from '@/components/ImageDisplay';
import ModelCustomization from '@/components/ModelCustomization';
import GenerationHistory from '@/components/GenerationHistory';
import ImageDisplayCard from '@/components/ImageDisplayCard';
// Removed Tabs imports
import { Card, CardContent } from "@/components/ui/card";
import { Toaster } from "@/components/ui/toaster";
import { useGenerationStore } from "@/lib/store";
// Removed useState, useEffect

export default function Home() {
  // Removed activeTab state
  const { originalImage } = useGenerationStore(); // Get originalImage to control customization visibility

  // Removed effect related to tabs

  return (
    // Added min-h-screen and flex column structure for potential footer later
    <div className="container mx-auto px-4 py-6 max-w-7xl flex flex-col min-h-screen">
      <Toaster />
      <header className="mb-4 text-center">
        <h1 className="text-3xl font-bold">StyleAI</h1>
      </header>

      {/* Main content grid */}
      <main className="flex-grow grid grid-cols-1 lg:grid-cols-[minmax(350px,_1fr)_2fr] xl:grid-cols-[minmax(350px,_1fr)_1.5fr_1.5fr] gap-4">

        {/* Left Column: Controls */}
        <div className="lg:col-span-1 flex flex-col h-full space-y-4">
          {/* Upload Section */}
          <Card className="flex flex-col">
            {/* Consider adding CardHeader if needed */}
            <CardContent className="p-4 flex-grow">
              <ClothingUpload />
            </CardContent>
          </Card>

          {/* Customization Section - Conditionally Rendered */}
          {/* TODO: Add smooth transition (e.g., fade-in) */}
          {originalImage && (
            <Card className="flex flex-col">
              {/* Consider adding CardHeader if needed */}
              <CardContent className="p-4 flex-grow">
                <ModelCustomization />
              </CardContent>
            </Card>
          )}

          {/* Generation History - Unified */}
          {/* TODO: Implement collapsible logic (e.g., Accordion/Details) */}
          {/* TODO: Refine styling for history items (thumbnails) */}
          {/* Generation History - Positioned at bottom */}
          <div className="mt-auto pt-6 min-h-0">
             <GenerationHistory />
          </div>          {/* Generation History - Positioned at bottom */}








































        </div>

        {/* Right Column: Results */}
        <div className="lg:hidden col-span-1">
          <ImageDisplay />
        </div>

        {/* --- Columns 2 & 3: Results (Vary based on breakpoint) --- */}

        {/* Original Image Card Container (LG: Column 2, XL: Column 2) */}
        <div className="hidden lg:flex lg:col-start-2 lg:col-span-1 xl:col-start-2 xl:col-span-1 flex-col h-full">
           <ImageDisplayCard type="original" />
        </div>

        {/* Generated Result Card Container (LG: Column 2 (overlaps), XL: Column 3) */}
         <div className="hidden lg:flex lg:col-start-2 lg:col-span-1 xl:col-start-3 xl:col-span-1 flex-col h-full">
           <ImageDisplayCard type="generated" />
         </div>

        {/* Removed separate mobile history section */}
      </main>

      {/* Optional Footer can go here */}
      {/* <footer className="mt-auto py-4 text-center text-muted-foreground">...</footer> */}
    </div>
  );
}
</file>

<file path="src/app/actions.ts">
'use server';

// Use the official Google GenAI SDK
import { GoogleGenAI } from "@google/genai"; // Use @google/genai
import fs from 'fs/promises';
import path from 'path';
// Import crypto for Node.js environment if subtle isn't always available server-side
import crypto from 'crypto';
import { z } from 'zod';

// Import our new utilities
import { imageCache } from '@/lib/cache-service';
import { PromptBuilder } from '@/lib/prompt-builder';
import { validate, generateClothingImageInputSchema } from '@/lib/validation';
import { ApiError, ImageProcessingError, NetworkError, ValidationError, toAppError } from '@/lib/errors';
import { ModelSettings, EnvironmentSettings } from '@/types';
import { GenerateClothingImageInput, GenerateClothingImageOutput, GenerationError } from '@/types/actions';
import { isDataURI } from '@/lib/utils'; // Import the helper

/**
 * Download an image from a URL and convert it to base64
 */
async function downloadImageAsBase64(imageUrl: string): Promise<{ data: string, mimeType: string }> {
  try {
    const response = await fetch(imageUrl);
    if (!response.ok) {
      throw new ImageProcessingError(
        `Failed to download image: ${response.status} ${response.statusText}`
      );
    }

    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.startsWith('image/')) {
      console.warn(`Downloaded content type is not an image: ${contentType}. Attempting to proceed.`);
    }

    const detectedMimeType = contentType || 'image/png'; // Use detected or default
    const buffer = await response.arrayBuffer();
    const base64 = Buffer.from(buffer).toString('base64');

    return { data: base64, mimeType: detectedMimeType };
  } catch (error) {
    console.error("Error downloading image:", error);
    if (error instanceof ImageProcessingError) {
      throw error;
    }
    throw new NetworkError(
      `Failed to download image from ${imageUrl}`,
      error instanceof Error ? error : undefined
    );
  }
}

/**
 * Generate a unique filename for storing generated images (using Node.js crypto)
 */
function generateUniqueFilenameSync(imageData: string): string {
  const timestamp = Date.now();
  // Use Node.js crypto for server-side actions
  const hash = crypto
    .createHash('sha256')
    .update(imageData + timestamp)
    .digest('hex');

  return `${timestamp}-${hash.slice(0, 8)}.png`;
}

/**
 * Store generated images on the server with metadata
 */
async function saveGeneratedImage(
  imageData: string, // Full data URI (e.g., data:image/png;base64,...)
  metadata: {
    clothingItemUrl: string, // Original source URL or truncated base64 string
    modelSettings: ModelSettings, // Use specific type
    environmentSettings: EnvironmentSettings // Use specific type
  }
): Promise<string> { // Returns the relative public path (e.g., /generated/...)
  try {
    // Extract base64 data
    const base64Data = imageData.replace(/^data:image\/\w+;base64,/, '');
    const buffer = Buffer.from(base64Data, 'base64');

    // Create directories if they don't exist
    const publicDir = path.join(process.cwd(), 'public');
    const generatedDir = path.join(publicDir, 'generated');
    const metadataDir = path.join(publicDir, 'metadata');

    await fs.mkdir(generatedDir, { recursive: true });
    await fs.mkdir(metadataDir, { recursive: true });

    // Generate unique filename (use sync version here)
    const filename = generateUniqueFilenameSync(imageData); // Use sync version
    const imagePath = path.join(generatedDir, filename);
    const metadataPath = path.join(metadataDir, `${filename}.json`);

    // Save image and metadata
    await fs.writeFile(imagePath, buffer);
    await fs.writeFile(metadataPath, JSON.stringify({
      timestamp: Date.now(),
      sourceImage: metadata.clothingItemUrl,
      modelSettings: metadata.modelSettings,
      environmentSettings: metadata.environmentSettings
    }, null, 2));

    // Return the relative path accessible from the web server root
    return `/generated/${filename}`;
  } catch (error) {
    console.error("Error saving generated image:", error);
    throw new ImageProcessingError(
      "Failed to save the generated image",
      error instanceof Error ? error : undefined
    );
  }
}


/**
 * Generate an image of a model wearing the provided clothing item
 * with the specified attributes and environment settings
 */
export async function generateClothingImage(input: GenerateClothingImageInput): Promise<GenerateClothingImageOutput | { error: GenerationError }> {
  try {
    // Validate input parameters
    validate(generateClothingImageInputSchema, input);

    // Check if we have this exact request cached
    const cacheKey = imageCache.createCacheKey(input);
    const cachedResult = await imageCache.get<GenerateClothingImageOutput>(cacheKey);

    if (cachedResult) {
      console.log('Using cached generation result for key:', cacheKey);
      return cachedResult;
    }
    console.log('No cache hit for key:', cacheKey, '. Generating new image.');


    // Continue with normal generation if not cached
    const apiKey = process.env.GOOGLE_GENAI_API_KEY;
    if (!apiKey) {
      console.error("GOOGLE_GENAI_API_KEY is not set.");
      throw new ApiError("GOOGLE_GENAI_API_KEY is not set in environment variables.");
    }

    // Initialize the Google GenAI client using the correct package
    const ai = new GoogleGenAI({ apiKey });

    // Define the specific model for image generation
    // !!! Consult Google Cloud documentation for the appropriate model identifier. !!!
    const modelIdentifier = "gemini-2.0-flash-exp-image-generation"; // Model from user's example

    // --- Handle base64 Data URI or download URL ---
    let inputBase64Image: string;
    let inputMimeType: string;
    let originalSource = input.clothingItemUrl; // Keep track of original input

    if (isDataURI(input.clothingItemUrl)) {
      console.log("Using provided base64 image data.");
      const match = input.clothingItemUrl.match(/^data:(image\/[a-zA-Z]+);base64,(.*)$/);
      if (!match || match.length < 3) {
        throw new ImageProcessingError("Invalid image data format provided.");
      }
      inputMimeType = match[1];
      inputBase64Image = match[2];
      // Optionally truncate base64 if storing it in metadata later
      originalSource = `${input.clothingItemUrl.substring(0, 50)}... (base64)`;
    } else {
      console.log("Downloading image from URL:", input.clothingItemUrl);
      // Download only if it's a URL
      try {
        const downloaded = await downloadImageAsBase64(input.clothingItemUrl);
        inputBase64Image = downloaded.data;
        inputMimeType = downloaded.mimeType;
      } catch (downloadError) {
        // Provide more specific feedback if download fails
        throw new NetworkError(`Failed to download image from URL: ${input.clothingItemUrl}`, downloadError instanceof Error ? downloadError : undefined);
      }
    }
    // --- End image handling ---

    // Create model and environment settings objects
    // Zod validation ensures these types match ModelSettings/EnvironmentSettings interfaces
    const modelSettings: ModelSettings = {
      gender: input.modelGender,
      bodyType: input.modelBodyType,
      ageRange: input.modelAgeRange,
      ethnicity: input.modelEthnicity,
    };

    const environmentSettings: EnvironmentSettings = {
      description: input.environmentDescription,
      lighting: input.lightingStyle,
      lensStyle: input.lensStyle,
    };

    // Build a structured prompt using our PromptBuilder
    const prompt = PromptBuilder.createPrompt(modelSettings, environmentSettings);

    // Prepare the content parts according to the @google/genai example structure
    const contents = [
      { text: prompt },
      {
        inlineData: {
          mimeType: inputMimeType,
          data: inputBase64Image,
        },
      },
    ];

    console.log(`Generating image with model: ${modelIdentifier}`);
    // Generate content using the ai.models.generateContent method
    const response = await ai.models.generateContent({
      model: modelIdentifier, // Pass model string directly
      contents: contents,     // Pass the simplified contents structure
      config: {
        responseModalities: ["Text", "Image"], // Specify expected output modalities
      },
    });

    // Improved error handling for API responses
    if (!response || !response.candidates || response.candidates.length === 0) {
       console.error("Invalid or empty response from AI service:", response);
      throw new ApiError('The AI service returned an invalid or empty response object');
    }

    // Process the response to extract the generated image
    let generatedImageUrl = ''; // This will hold the persistent URL
    const candidate = response.candidates[0]; // Get the first candidate

    if (candidate && candidate.content && candidate.content.parts) {
      for (const part of candidate.content.parts) {
        if (part.text) {
          // Log any text part for debugging or potential use
          console.log("Received text part from Gemini:", part.text);
        }
        // Look for inlineData which contains the image
        if (part.inlineData) {
          const imageData = part.inlineData.data; // This is base64
          const imageMimeType = part.inlineData.mimeType;

          // *** NEW: Save the image and get persistent URL ***
          const fullDataUrl = `data:${imageMimeType};base64,${imageData}`;
          const persistentImageUrl = await saveGeneratedImage(
            fullDataUrl, // Pass the full data URL to save function
            {
              clothingItemUrl: originalSource, // Store original source (URL or truncated base64)
              modelSettings: modelSettings, // Pass constructed settings
              environmentSettings: environmentSettings // Pass constructed settings
            }
          );
          console.log("Saved image to:", persistentImageUrl);
          generatedImageUrl = persistentImageUrl; // Use the persistent URL
          // *** END NEW ***
          break; // Found the image, exit the loop
        }
      }
    } else {
       console.error("Invalid candidate structure in AI response:", candidate);
      throw new ApiError(
        "Failed to get valid candidates or parts from the Gemini response.",
        undefined,
        { response } // Include the raw response for debugging if possible
      );
    }

    // Check if an image was actually extracted and saved
    if (!generatedImageUrl) {
      console.error("Failed to extract and save image data from the response parts.");
      throw new ImageProcessingError(
        "Failed to find and process generated image data in the response."
      );
    }

    // Create the result object with the persistent URL
    const result: GenerateClothingImageOutput = {
      generatedImageUrl: generatedImageUrl, // Now contains /generated/filename.png
      promptUsed: prompt,
    };

    // Cache the result (containing the persistent URL)
    console.log('Caching result for key:', cacheKey);
    await imageCache.set(cacheKey, result);

    return result;
  } catch (error: unknown) {
    console.error("Error in generateClothingImage action:", error);

    // Convert to AppError for consistent error handling
    const appError = toAppError(error);

    // Return appropriate error response based on error type
    if (appError instanceof ValidationError) {
      return {
        error: {
          code: 'VALIDATION_ERROR',
          message: appError.message,
          details: appError.field ? { field: appError.field } : undefined
        }
      };
    } else if (appError instanceof NetworkError) {
      return {
        error: {
          code: 'NETWORK_ERROR',
          message: 'Failed to connect to the AI service or download image. Please check your internet connection and image URL.'
        }
      };
    } else if (appError instanceof ApiError) {
      return {
        error: {
          code: 'API_ERROR',
          message: `AI Service Error: ${appError.message}`, // Add prefix for clarity
          details: appError.statusCode ? { statusCode: appError.statusCode } : undefined
        }
      };
    } else if (appError instanceof ImageProcessingError) {
      return {
        error: {
          code: 'PROCESSING_ERROR',
          message: `Image Processing Error: ${appError.message}`, // Add prefix
          details: appError.message // Keep original message in details
        }
      };
    } else {
      // Catch-all for unexpected errors
      return {
        error: {
          code: 'PROCESSING_ERROR', // Use a generic code for unknown internal errors
          message: 'An unexpected error occurred while processing your request.',
          details: process.env.NODE_ENV === 'development' ? appError.message : undefined
        }
      };
    }
  }
}
</file>

<file path="src/components/ImageDisplay.tsx">
"use client";

import Image from 'next/image';
import { useState, useEffect } from 'react';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Download, Share, UploadCloud, Wand2, AlertCircle } from 'lucide-react';
import { useGenerationStore } from '@/lib/store';

export default function ImageDisplay() {
  const { originalImage, generatedImage, isLoading, error } = useGenerationStore();
  const [originalLoaded, setOriginalLoaded] = useState(false);
  const [generatedLoaded, setGeneratedLoaded] = useState(false);

  // Reset loaded states if images change using useEffect
  useEffect(() => {
    setOriginalLoaded(false);
  }, [originalImage]);

  useEffect(() => {
    setGeneratedLoaded(false);
  }, [generatedImage]);


  const handleDownload = async () => {
    if (!generatedImage) return;
    try {
      const response = await fetch(generatedImage);
      if (!response.ok) throw new Error('Failed to fetch image for download');
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `styleai-generated-${Date.now()}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (err) {
      console.error("Download failed:", err);
      // TODO: Add toast notification on failure
    }
  };

  const handleShare = async () => {
    // Check if generatedImage exists and navigator.share is supported
    if (!generatedImage || typeof navigator.share !== 'function') return;
    try {
      const response = await fetch(generatedImage);
      if (!response.ok) throw new Error('Failed to fetch image for sharing');
      const blob = await response.blob();
      const file = new File([blob], 'styleai-generated.png', { type: blob.type || 'image/png' });
      await navigator.share({
        title: 'My StyleAI Generated Image',
        text: 'Check out this outfit I generated with StyleAI!',
        files: [file]
      });
    } catch (err) {
      console.error('Error sharing:', err);
      // TODO: Add toast notification on failure
    }
  };

  // Helper component for placeholder content
  const PlaceholderContent = ({ icon: Icon, text }: { icon: React.ElementType, text: string }) => (
    <div className="flex flex-col h-full items-center justify-center text-muted-foreground p-4">
      <Icon className="h-16 w-16 mb-4 text-gray-400" />
      <p className="text-center text-sm">{text}</p>
    </div>
  );

  return (
    <div className="grid grid-cols-1 gap-6">
      {/* Original Image Card */}
      <Card className="flex flex-col">
        <CardHeader>
          <CardTitle>Original Item</CardTitle>
        </CardHeader>
        <CardContent className="p-4 flex-grow">
          <div className="relative aspect-square w-full overflow-hidden rounded-md bg-muted">
            {originalImage ? (
              <>
                {!originalLoaded && <Skeleton className="absolute inset-0" />}
                <Image
                  src={originalImage}
                  alt="Original clothing item"
                  fill
                  sizes="(max-width: 1024px) 100vw, 50vw"
                  className={`object-contain transition-opacity duration-300 ${originalLoaded ? 'opacity-100' : 'opacity-0'}`}
                  priority={true}
                  onLoad={() => setOriginalLoaded(true)}
                />
              </>
            ) : (
              <PlaceholderContent icon={UploadCloud} text="Upload a clothing item to get started" />
            )}
          </div>
        </CardContent>
      </Card>

      {/* Generated Image Card */}
      <Card className="flex flex-col">
        <CardHeader>
          <CardTitle>Generated Result</CardTitle>
        </CardHeader>
        <CardContent className="p-4 flex-grow">
          <div className="relative aspect-square w-full overflow-hidden rounded-md bg-muted">
            {isLoading ? (
              <div className="absolute inset-0 flex flex-col items-center justify-center p-6">
                <Skeleton className="h-full w-full" />
                <p className="absolute bottom-4 text-sm text-center font-medium text-muted-foreground">
                  AI is creating your image...
                </p>
              </div>
            ) : error ? (
              <div className="absolute inset-0 flex items-center justify-center p-4">
                <Alert variant="destructive" className="w-full">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>Generation Failed</AlertTitle>
                  <AlertDescription>
                    {error.message || 'An unexpected error occurred. Please try again.'}
                  </AlertDescription>
                </Alert>
              </div>
            ) : generatedImage ? (
              <>
                {!generatedLoaded && <Skeleton className="absolute inset-0" />}
                <Image
                  src={generatedImage}
                  alt="Generated model wearing item"
                  fill
                  sizes="(max-width: 1024px) 100vw, 50vw"
                  className={`object-contain transition-opacity duration-300 ${generatedLoaded ? 'opacity-100' : 'opacity-0'}`}
                  quality={90}
                  onLoad={() => setGeneratedLoaded(true)}
                />
              </>
            ) : (
              <PlaceholderContent icon={Wand2} text="Customize settings and click Generate" />
            )}
          </div>
        </CardContent>

        {generatedImage && !isLoading && !error && (
          <CardFooter className="px-4 pb-4 pt-2 flex justify-end gap-2">
            <TooltipProvider delayDuration={100}>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="outline" size="icon" onClick={handleDownload}>
                    <Download className="h-4 w-4" />
                    <span className="sr-only">Download Image</span>
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Download Image</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
            {/* Explicitly check if navigator and navigator.share function exist */}
            {typeof navigator !== 'undefined' && typeof navigator.share === 'function' && (
              <TooltipProvider delayDuration={100}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button variant="outline" size="icon" onClick={handleShare}>
                      <Share className="h-4 w-4" />
                      <span className="sr-only">Share Image</span>
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Share Image</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            )}
          </CardFooter>
        )}
      </Card>
    </div>
  );
}
</file>

<file path="package.json">
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack -p 9002",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@google/genai": "^0.8.0",
    "@hookform/resolvers": "^5.0.1",
    "@radix-ui/react-accordion": "^1.2.4",
    "@radix-ui/react-alert-dialog": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.4",
    "@radix-ui/react-checkbox": "^1.1.5",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-dropdown-menu": "^2.1.7",
    "@radix-ui/react-label": "^2.1.3",
    "@radix-ui/react-menubar": "^1.1.7",
    "@radix-ui/react-popover": "^1.1.7",
    "@radix-ui/react-progress": "^1.1.3",
    "@radix-ui/react-radio-group": "^1.2.4",
    "@radix-ui/react-scroll-area": "^1.2.4",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.3",
    "@radix-ui/react-slider": "^1.2.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.1.4",
    "@radix-ui/react-tabs": "^1.1.4",
    "@radix-ui/react-toast": "^1.2.7",
    "@radix-ui/react-tooltip": "^1.2.0",
    "@tailwindcss/postcss": "^4.1.3",
    "@tanstack/react-query": "^5.72.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.487.0",
    "next": "15.3.0",
    "patch-package": "^8.0.0",
    "react": "^19.1.0",
    "react-day-picker": "^9.6.5",
    "react-dom": "^19.1.0",
    "react-dropzone": "^14.2.3",
    "react-hook-form": "^7.55.0",
    "recharts": "^2.15.2",
    "tailwind-merge": "^3.2.0",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^9.0.1",
    "zod": "^3.24.2",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@playwright/test": "^1.51.1",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.3",
    "typescript": "^5"
  }
}
</file>

<file path="src/components/ModelCustomization.tsx">
"use client";

import { Gender, BodyType, AgeRange, Ethnicity, EnvironmentDescription, LightingStyle, LensStyle } from '@/lib/store';
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { generateClothingImage } from '@/app/actions';
// Removed Input import as it's not used
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
// Removed Card imports as they are handled by the parent in page.tsx
import { Separator } from "@/components/ui/separator"; // Import Separator
import { Loader2 } from 'lucide-react'; // Import spinner icon
console.log("ModelCustomization loaded");
import { useGenerationStore } from "@/lib/store";
import { toAppError } from "@/lib/errors"; // Assuming error helper exists

const ModelCustomization = () => {
  const {
    originalImage,
    modelSettings,
    setModelSettings,
    environmentSettings,
    setEnvironmentSettings,
    setGeneratedImage,
    addToHistory,
    isLoading, // Get isLoading state
    setLoading,
    setError
  } = useGenerationStore();

  const { gender, bodyType, ageRange, ethnicity } = modelSettings;
  const { description: environment, lighting, lensStyle: lens } = environmentSettings;

  const setGender = (value: string) => setModelSettings({ gender: value as Gender });
  const setBodyType = (value: string) => setModelSettings({ bodyType: value as BodyType });
  const setAgeRange = (value: string) => setModelSettings({ ageRange: value as AgeRange });
  const setEthnicity = (value: string) => setModelSettings({ ethnicity: value as Ethnicity });
  const setEnvironment = (value: string) => setEnvironmentSettings({ description: value as EnvironmentDescription });
  const setLighting = (value: string) => setEnvironmentSettings({ lighting: value as LightingStyle });
  const setLens = (value: string) => setEnvironmentSettings({ lensStyle: value as LensStyle });

  const { toast } = useToast();

  const handleSubmit = async () => {
    try {
      setError(null);
      setLoading(true);

      if (!originalImage) {
        toast({
          title: "Error",
          description: "Please upload a clothing item first.",
          variant: "destructive",
        });
        setLoading(false);
        return;
      }

      const result = await generateClothingImage({
        clothingItemUrl: originalImage,
        modelGender: gender,
        modelBodyType: bodyType,
        modelAgeRange: ageRange,
        modelEthnicity: ethnicity,
        environmentDescription: environment,
        lightingStyle: lighting,
        lensStyle: lens,
      });

      if ('error' in result) {
        let description = result.error.message;
        const errorCode = result.error.code;
        const errorDetails = result.error.details;

        if (errorCode === 'VALIDATION_ERROR' && errorDetails?.field) {
          description = `Invalid input for ${errorDetails.field}: ${result.error.message}`;
        } else if (errorCode === 'API_ERROR') {
          description = `AI Service Error: ${result.error.message}`;
        } else if (errorCode === 'NETWORK_ERROR') {
           description = `Network Error: ${result.error.message}. Please check connection.`;
        } else if (errorCode === 'PROCESSING_ERROR') {
           description = `Image Processing Error: ${result.error.message}`;
        }

        setError({ message: description });
        toast({
          title: "Generation Failed",
          description: description,
          variant: "destructive",
        });
      } else if (result.generatedImageUrl && result.promptUsed) {
        setGeneratedImage(result.generatedImageUrl);
        addToHistory({
          originalImage: originalImage,
          generatedImage: result.generatedImageUrl
        });
        toast({
          title: "Image Generated",
          description: "Successfully generated image.",
        });
      } else {
        setError({ message: "Received an invalid response from the generation service" });
        toast({
          title: "Generation Failed",
          description: "Failed to generate image. Please try again.",
          variant: "destructive",
        });
      }
    } catch (error: any) {
      console.error("Error calling generateClothingImage action:", error);
      const appError = toAppError(error);
      setError({ message: appError.message });
      toast({
        title: "Error",
        description: appError.message || "An unexpected error occurred. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // TODO: Wrap this return in an animation component (e.g., Framer Motion) for smooth appearance
  return (
    <div className="space-y-6"> {/* Added space-y */}
      <h2 className="text-lg font-semibold">Customize Model & Scene</h2>

      {/* Model Settings Group */}
      <div className="space-y-4">
        <h3 className="text-base font-medium text-muted-foreground">Model Details</h3>
        <div>
          <Label htmlFor="gender">Gender</Label>
          <Select value={gender} onValueChange={setGender}>
            <SelectTrigger id="gender">
              <SelectValue placeholder="Select Gender" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="male">Male</SelectItem>
              <SelectItem value="female">Female</SelectItem>
              <SelectItem value="non-binary">Non-binary</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label htmlFor="body-type">Body Type</Label>
          <Select value={bodyType} onValueChange={setBodyType}>
            <SelectTrigger id="body-type">
              <SelectValue placeholder="Select Body Type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="slim">Slim</SelectItem>
              <SelectItem value="athletic">Athletic</SelectItem>
              <SelectItem value="average">Average</SelectItem>
              <SelectItem value="plus-size">Plus Size</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label htmlFor="age-range">Age Range</Label>
          <Select value={ageRange} onValueChange={setAgeRange}>
            <SelectTrigger id="age-range">
              <SelectValue placeholder="Select Age Range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="18-25">18-25</SelectItem>
              <SelectItem value="26-35">26-35</SelectItem>
              <SelectItem value="36-45">36-45</SelectItem>
              <SelectItem value="46-60">46-60</SelectItem>
              <SelectItem value="60+">60+</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label htmlFor="ethnicity">Ethnicity</Label>
          <Select value={ethnicity} onValueChange={setEthnicity}>
            <SelectTrigger id="ethnicity">
              <SelectValue placeholder="Select Ethnicity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="caucasian">Caucasian</SelectItem>
              <SelectItem value="black">Black</SelectItem>
              <SelectItem value="asian">Asian</SelectItem>
              <SelectItem value="hispanic">Hispanic</SelectItem>
              <SelectItem value="middle-eastern">Middle Eastern</SelectItem>
              <SelectItem value="mixed">Mixed</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <Separator />

      {/* Environment Settings Group */}
      <div className="space-y-4">
        <h3 className="text-base font-medium text-muted-foreground">Scene Details</h3>
        <div>
          <Label htmlFor="environment">Environment</Label>
          <Select value={environment} onValueChange={setEnvironment}>
            <SelectTrigger id="environment">
              <SelectValue placeholder="Select Environment" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="studio">Studio</SelectItem>
              <SelectItem value="outdoor">Outdoor</SelectItem>
              <SelectItem value="urban">Urban</SelectItem>
              <SelectItem value="beach">Beach</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label htmlFor="lighting">Lighting</Label>
          <Select value={lighting} onValueChange={setLighting}>
            <SelectTrigger id="lighting">
              <SelectValue placeholder="Select Lighting" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="natural">Natural</SelectItem>
              <SelectItem value="studio">Studio</SelectItem>
              <SelectItem value="soft">Soft</SelectItem>
              <SelectItem value="dramatic">Dramatic</SelectItem>
              <SelectItem value="bright">Bright</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div>
          <Label htmlFor="lens">Lens Style</Label>
          <Select value={lens} onValueChange={setLens}>
            <SelectTrigger id="lens">
              <SelectValue placeholder="Select Lens Style" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="portrait">Portrait</SelectItem>
              <SelectItem value="fashion">Fashion</SelectItem>
              <SelectItem value="product">Product</SelectItem>
              <SelectItem value="editorial">Editorial</SelectItem>
              <SelectItem value="casual">Casual</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <Button
        onClick={handleSubmit}
        className="w-full" // Removed mt-6 as parent div has space-y
        disabled={isLoading || !originalImage} // Also disable if no original image
      >
        {isLoading ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Generating...
          </>
        ) : (
          'Generate Image' // Changed text slightly
        )}
      </Button>
    </div>
  );
};

export default ModelCustomization;
</file>

</files>
